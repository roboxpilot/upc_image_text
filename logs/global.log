2024-10-15 18:08:44,017 - controllers.conversation_controller - INFO - conversation_controller.py:17 - Received conversation request for conversation ID: 134425
2024-10-15 18:08:44,017 - controllers.conversation_controller - INFO - conversation_controller.py:21 - Processing image message
2024-10-15 18:08:44,017 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-15 18:08:44,018 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-15 18:08:48,780 - services.ai_client_service - ERROR - ai_client_service.py:92 - Error in OpenAI image API call: RetryError[<Future at 0x7fa7f8d31f00 state=finished raised BadRequestError>]
Traceback (most recent call last):
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 180, in retry_sync
    response = func(*args, **kwargs)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_utils/_utils.py", line 274, in wrapper
    return func(*args, **kwargs)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/resources/chat/completions.py", line 679, in create
    return self._post(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 1260, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 937, in request
    return self._request(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 1041, in _request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': "You uploaded an unsupported image. Please make sure your image is below 20 MB in size and is of one the following formats: ['png', 'jpeg', 'gif', 'webp'].", 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_image_format'}}

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 177, in retry_sync
    for attempt in max_retries:
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 443, in __iter__
    do = self.iter(retry_state=retry_state)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 376, in iter
    result = action(retry_state)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 419, in exc_check
    raise retry_exc from fut.exception()
tenacity.RetryError: RetryError[<Future at 0x7fa7f8d31f00 state=finished raised BadRequestError>]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/upc_bot/upc_bot/services/ai_client_service.py", line 76, in make_image_api_call
    response = image_client.chat.completions.create(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/patch.py", line 143, in new_create_sync
    response = retry_sync(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 215, in retry_sync
    raise InstructorRetryException(
instructor.exceptions.InstructorRetryException: RetryError[<Future at 0x7fa7f8d31f00 state=finished raised BadRequestError>]
2024-10-15 18:08:48,781 - controllers.conversation_controller - ERROR - conversation_controller.py:103 - Error in conversation_endpoint: 500: Error in Groq API call: RetryError[<Future at 0x7fa7f8d31f00 state=finished raised BadRequestError>]
Traceback (most recent call last):
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 180, in retry_sync
    response = func(*args, **kwargs)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_utils/_utils.py", line 274, in wrapper
    return func(*args, **kwargs)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/resources/chat/completions.py", line 679, in create
    return self._post(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 1260, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 937, in request
    return self._request(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 1041, in _request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': "You uploaded an unsupported image. Please make sure your image is below 20 MB in size and is of one the following formats: ['png', 'jpeg', 'gif', 'webp'].", 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_image_format'}}

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 177, in retry_sync
    for attempt in max_retries:
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 443, in __iter__
    do = self.iter(retry_state=retry_state)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 376, in iter
    result = action(retry_state)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 419, in exc_check
    raise retry_exc from fut.exception()
tenacity.RetryError: RetryError[<Future at 0x7fa7f8d31f00 state=finished raised BadRequestError>]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/upc_bot/upc_bot/services/ai_client_service.py", line 76, in make_image_api_call
    response = image_client.chat.completions.create(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/patch.py", line 143, in new_create_sync
    response = retry_sync(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 215, in retry_sync
    raise InstructorRetryException(
instructor.exceptions.InstructorRetryException: RetryError[<Future at 0x7fa7f8d31f00 state=finished raised BadRequestError>]

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/upc_bot/upc_bot/controllers/conversation_controller.py", line 25, in conversation_endpoint
    "notification": "processing image..",
  File "/opt/upc_bot/upc_bot/services/image_processor_service.py", line 11, in extract_image_content
    content = make_image_api_call(Prompts.IMAGE_PRODUCT_EXTRACTION, image_data)
  File "/opt/upc_bot/upc_bot/services/ai_client_service.py", line 93, in make_image_api_call
    raise APICallError(Config.SELECTED_MODEL.value, str(e))
exceptions.APICallError: 500: Error in Groq API call: RetryError[<Future at 0x7fa7f8d31f00 state=finished raised BadRequestError>]
2024-10-15 18:13:25,633 - controllers.conversation_controller - INFO - conversation_controller.py:17 - Received conversation request for conversation ID: 134425
2024-10-15 18:13:25,633 - controllers.conversation_controller - INFO - conversation_controller.py:21 - Processing image message
2024-10-15 18:13:25,633 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-15 18:13:25,634 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-15 18:13:35,764 - services.ai_client_service - ERROR - ai_client_service.py:92 - Error in OpenAI image API call: RetryError[<Future at 0x7fa7f8d51120 state=finished raised BadRequestError>]
Traceback (most recent call last):
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 180, in retry_sync
    response = func(*args, **kwargs)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_utils/_utils.py", line 274, in wrapper
    return func(*args, **kwargs)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/resources/chat/completions.py", line 679, in create
    return self._post(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 1260, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 937, in request
    return self._request(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 1041, in _request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': "You uploaded an unsupported image. Please make sure your image is below 20 MB in size and is of one the following formats: ['png', 'jpeg', 'gif', 'webp'].", 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_image_format'}}

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 177, in retry_sync
    for attempt in max_retries:
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 443, in __iter__
    do = self.iter(retry_state=retry_state)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 376, in iter
    result = action(retry_state)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 419, in exc_check
    raise retry_exc from fut.exception()
tenacity.RetryError: RetryError[<Future at 0x7fa7f8d51120 state=finished raised BadRequestError>]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/upc_bot/upc_bot/services/ai_client_service.py", line 76, in make_image_api_call
    response = image_client.chat.completions.create(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/patch.py", line 143, in new_create_sync
    response = retry_sync(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 215, in retry_sync
    raise InstructorRetryException(
instructor.exceptions.InstructorRetryException: RetryError[<Future at 0x7fa7f8d51120 state=finished raised BadRequestError>]
2024-10-15 18:13:35,765 - controllers.conversation_controller - ERROR - conversation_controller.py:103 - Error in conversation_endpoint: 500: Error in Groq API call: RetryError[<Future at 0x7fa7f8d51120 state=finished raised BadRequestError>]
Traceback (most recent call last):
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 180, in retry_sync
    response = func(*args, **kwargs)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_utils/_utils.py", line 274, in wrapper
    return func(*args, **kwargs)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/resources/chat/completions.py", line 679, in create
    return self._post(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 1260, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 937, in request
    return self._request(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/openai/_base_client.py", line 1041, in _request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': "You uploaded an unsupported image. Please make sure your image is below 20 MB in size and is of one the following formats: ['png', 'jpeg', 'gif', 'webp'].", 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_image_format'}}

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 177, in retry_sync
    for attempt in max_retries:
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 443, in __iter__
    do = self.iter(retry_state=retry_state)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 376, in iter
    result = action(retry_state)
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/tenacity/__init__.py", line 419, in exc_check
    raise retry_exc from fut.exception()
tenacity.RetryError: RetryError[<Future at 0x7fa7f8d51120 state=finished raised BadRequestError>]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/upc_bot/upc_bot/services/ai_client_service.py", line 76, in make_image_api_call
    response = image_client.chat.completions.create(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/patch.py", line 143, in new_create_sync
    response = retry_sync(
  File "/opt/env/anaconda/envs/upc/lib/python3.10/site-packages/instructor/retry.py", line 215, in retry_sync
    raise InstructorRetryException(
instructor.exceptions.InstructorRetryException: RetryError[<Future at 0x7fa7f8d51120 state=finished raised BadRequestError>]

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/upc_bot/upc_bot/controllers/conversation_controller.py", line 25, in conversation_endpoint
    "notification": "processing image..",
  File "/opt/upc_bot/upc_bot/services/image_processor_service.py", line 11, in extract_image_content
    content = make_image_api_call(Prompts.IMAGE_PRODUCT_EXTRACTION, image_data)
  File "/opt/upc_bot/upc_bot/services/ai_client_service.py", line 93, in make_image_api_call
    raise APICallError(Config.SELECTED_MODEL.value, str(e))
exceptions.APICallError: 500: Error in Groq API call: RetryError[<Future at 0x7fa7f8d51120 state=finished raised BadRequestError>]
2024-10-17 17:47:18,183 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-17 17:47:18,201 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-17 17:47:18,213 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-17 17:47:49,444 - controllers.conversation_controller - INFO - conversation_controller.py:17 - Received conversation request for conversation ID: conv-12345
2024-10-17 17:47:49,445 - controllers.conversation_controller - ERROR - conversation_controller.py:117 - Error in conversation_endpoint: name 'requests' is not defined
Traceback (most recent call last):
  File "/opt/upc_bot/upc_bot/controllers/conversation_controller.py", line 29, in conversation_endpoint
    response = requests.post(notification_url, params=notification_params)
NameError: name 'requests' is not defined. Did you mean: 'request'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/upc_bot/upc_bot/controllers/conversation_controller.py", line 32, in conversation_endpoint
    except requests.exceptions.RequestException as e:
NameError: name 'requests' is not defined. Did you mean: 'request'?
2024-10-17 17:49:08,219 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-17 17:49:08,231 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-17 17:49:08,243 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-17 17:49:13,358 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-17 17:49:23,402 - controllers.conversation_controller - INFO - conversation_controller.py:36 - Processing image message
2024-10-17 17:49:23,402 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-17 17:49:23,403 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-17 17:49:36,544 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Based on the content from the image, here is the extracted JSON representation:

```json
{
  "plan_name": "Giga Pack",
  "validity": "N/A",
  "units": "GSM",
  "duration": "N/A",
  "price": "N/A"
}
```

Note: Some values are marked as "N/A" since they are not present in the image.
2024-10-17 17:49:36,544 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Based on the content from the image, here is the extracted JSON representation:

```json
{
  "plan_name": "Giga Pack",
  "validity": "N/A",
  "units": "GSM",
  "duration": "N/A",
  "price": "N/A"
}
```

Note: Some values are marked as "N/A" since they are not present in the image.
2024-10-17 17:49:36,544 - controllers.conversation_controller - DEBUG - conversation_controller.py:41 - Extracted content from image: Based on the content from the image, here is the extracted JSON representation:

```json
{
  "plan_name": "Giga Pack",
  "validity": "N/A",
  "units": "GSM",
  "duration": "N/A",
  "price": "N/A"
}
```

Note: Some values are marked as "N/A" since they are not present in the image.
2024-10-17 17:49:36,544 - controllers.conversation_controller - DEBUG - conversation_controller.py:56 - Formatted messages: [
  {
    "role": "user",
    "content": "Based on the content from the image, here is the extracted JSON representation:\n\n```json\n{\n  \"plan_name\": \"Giga Pack\",\n  \"validity\": \"N/A\",\n  \"units\": \"GSM\",\n  \"duration\": \"N/A\",\n  \"price\": \"N/A\"\n}\n```\n\nNote: Some values are marked as \"N/A\" since they are not present in the image."
  }
]
2024-10-17 17:49:36,545 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-17 17:49:36,545 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-17 17:49:36,545 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 17:49:40,264 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-17 17:49:40,265 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-17 17:49:40,265 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-17 17:49:40,265 - controllers.conversation_controller - INFO - conversation_controller.py:59 - Conversation is product-related
2024-10-17 17:49:40,265 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-17 17:49:40,266 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-17 17:49:40,266 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'Product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 17:49:41,001 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'Giga Pack', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'Product_offer_price': None, 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 17:49:41,001 - controllers.conversation_controller - DEBUG - conversation_controller.py:61 - Extracted plan: {'product_name': 'Giga Pack', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'Product_offer_price': None, 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 17:49:41,001 - controllers.conversation_controller - DEBUG - conversation_controller.py:92 - Final extracted plan: {
  "product_name": "Giga Pack",
  "product_description": null,
  "product_family": "GSM",
  "product_group": "Prepaid",
  "Product_offer_price": null,
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-17 18:01:02,658 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729168262323
2024-10-17 18:01:12,680 - controllers.conversation_controller - INFO - conversation_controller.py:36 - Processing image message
2024-10-17 18:01:12,681 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-17 18:01:12,681 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-17 18:01:19,422 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here’s the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": "4 Weeks",
  "price": "20 OMR"
}
```
2024-10-17 18:01:19,422 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here’s the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": "4 Weeks",
  "price": "20 OMR"
}
```
2024-10-17 18:01:19,422 - controllers.conversation_controller - DEBUG - conversation_controller.py:41 - Extracted content from image: Here’s the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": "4 Weeks",
  "price": "20 OMR"
}
```
2024-10-17 18:01:19,423 - controllers.conversation_controller - DEBUG - conversation_controller.py:56 - Formatted messages: [
  {
    "role": "assistant",
    "content": "Here\u2019s the extracted content in JSON format:\n\n```json\n{\n  \"plan_name\": \"Hayyak 20\",\n  \"validity\": \"4 Weeks\",\n  \"units\": {\n    \"data_allowance\": \"34 GB\",\n    \"flexi_minutes\": \"650 min\"\n  },\n  \"duration\": \"4 Weeks\",\n  \"price\": \"20 OMR\"\n}\n```"
  }
]
2024-10-17 18:01:19,423 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-17 18:01:19,423 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-17 18:01:19,423 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:01:28,709 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
  "classification": "product_related"
}
2024-10-17 18:01:28,710 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
  "classification": "product_related"
}
2024-10-17 18:01:28,710 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-17 18:01:28,710 - controllers.conversation_controller - INFO - conversation_controller.py:59 - Conversation is product-related
2024-10-17 18:01:28,710 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729168262323
2024-10-17 18:01:28,710 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-17 18:01:28,711 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'Product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:01:29,597 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'Product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:01:29,598 - controllers.conversation_controller - DEBUG - conversation_controller.py:61 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'Product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:01:29,598 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:01:29,892 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-17 18:01:29,893 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:01:30,495 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: Hayyak 20
• Product Description: (Not Provided)
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 20
• Pop Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-17 18:01:30,495 - controllers.conversation_controller - INFO - conversation_controller.py:78 - Sending final confirmation message
2024-10-17 18:04:35,340 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-17 18:04:35,352 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-17 18:04:35,361 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-17 18:04:59,657 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729168499550
2024-10-17 18:05:00,797 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-17 18:05:00,798 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-17 18:05:00,798 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-17 18:05:15,588 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: ```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": null,
  "price": "20 OMR"
}
```
2024-10-17 18:05:15,588 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: ```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": null,
  "price": "20 OMR"
}
```
2024-10-17 18:05:15,588 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: ```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": null,
  "price": "20 OMR"
}
```
2024-10-17 18:05:15,589 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "assistant",
    "content": "```json\n{\n  \"plan_name\": \"Hayyak 20\",\n  \"validity\": \"4 Weeks\",\n  \"units\": {\n    \"data_allowance\": \"34 GB\",\n    \"flexi_minutes\": \"650 min\"\n  },\n  \"duration\": null,\n  \"price\": \"20 OMR\"\n}\n```"
  }
]
2024-10-17 18:05:15,589 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-17 18:05:15,589 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-17 18:05:15,589 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:05:16,089 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-17 18:05:16,089 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-17 18:05:16,090 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-17 18:05:16,090 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-17 18:05:16,090 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729168499550
2024-10-17 18:05:16,090 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-17 18:05:16,090 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:05:16,930 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:05:16,930 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:05:16,930 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:05:17,259 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-17 18:05:17,259 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:05:17,854 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

* Product Name: Hayyak 20
* Product Description: null
* Product Family: GSM
* Product Group: Prepaid
* Product Offer Price: 20
* Pop Type: Normal
* Price Category: Base Price
* Price Mode: Non-Recurring
* Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-17 18:05:17,854 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-17 18:05:41,304 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729168499550
2024-10-17 18:05:41,304 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "assistant",
    "content": "Here are the details of your product with all mandatory default parameters enabled:\n\n* Product Name: Hayyak 20\n* Product Description: null\n* Product Family: GSM\n* Product Group: Prepaid\n* Product Offer Price: 20\n* Pop Type: Normal\n* Price Category: Base Price\n* Price Mode: Non-Recurring\n* Product Specification Type: ADDON\n\nWould you like to update any of these details or proceed as is?"
  },
  {
    "role": "user",
    "content": "change the product name to hyakk and price to 25"
  }
]
2024-10-17 18:05:41,304 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-17 18:05:41,305 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-17 18:05:41,305 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:05:41,655 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {"classification": "product_related"}
2024-10-17 18:05:41,655 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {"classification": "product_related"}
2024-10-17 18:05:41,656 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-17 18:05:41,656 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-17 18:05:41,656 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729168499550
2024-10-17 18:05:41,656 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 2 messages
2024-10-17 18:05:41,656 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:05:42,471 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'hyakk', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '25', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:05:42,471 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'hyakk', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '25', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:05:42,471 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:05:42,756 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-17 18:05:42,756 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:05:43,334 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: hyakk
• Product Description: null
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 25
• Pop Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-17 18:05:43,334 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-17 18:05:54,722 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729168499550
2024-10-17 18:05:54,723 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "assistant",
    "content": "Here are the details of your product with all mandatory default parameters enabled:\n\n* Product Name: Hayyak 20\n* Product Description: null\n* Product Family: GSM\n* Product Group: Prepaid\n* Product Offer Price: 20\n* Pop Type: Normal\n* Price Category: Base Price\n* Price Mode: Non-Recurring\n* Product Specification Type: ADDON\n\nWould you like to update any of these details or proceed as is?"
  },
  {
    "role": "user",
    "content": "change the product name to hyakk and price to 25"
  },
  {
    "role": "assistant",
    "content": "Here are the details of your product with all mandatory default parameters enabled:\n\n\u2022 Product Name: hyakk\n\u2022 Product Description: null\n\u2022 Product Family: GSM\n\u2022 Product Group: Prepaid\n\u2022 Product Offer Price: 25\n\u2022 Pop Type: Normal\n\u2022 Price Category: Base Price\n\u2022 Price Mode: Non-Recurring\n\u2022 Product Specification Type: ADDON\n\nWould you like to update any of these details or proceed as is?"
  },
  {
    "role": "user",
    "content": "proceed"
  }
]
2024-10-17 18:05:54,723 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-17 18:05:54,723 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-17 18:05:54,723 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:05:55,089 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-17 18:05:55,090 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-17 18:05:55,090 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-17 18:05:55,090 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-17 18:05:55,090 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729168499550
2024-10-17 18:05:55,090 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 4 messages
2024-10-17 18:05:55,090 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:05:55,859 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'hyakk', 'product_description': 'null', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '25', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:05:55,860 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'hyakk', 'product_description': 'null', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '25', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-17 18:05:55,860 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-17 18:05:56,166 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: True
2024-10-17 18:05:56,167 - controllers.conversation_controller - INFO - conversation_controller.py:67 - Product creation confirmed
2024-10-18 09:59:52,476 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729094216114
2024-10-18 09:59:52,481 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "proceed"
  },
  {
    "role": "assistant",
    "content": "Here is my response:\n\n\"Great to get started! Before we begin creating a product for you, could you please provide some details about what you have in mind? What kind of product are you looking for, and what features would you like it to have?\""
  },
  {
    "role": "user",
    "content": "yes i want to create voice offer with 5$ price and 10 days validity"
  }
]
2024-10-18 09:59:52,482 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 09:59:52,483 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 09:59:52,483 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 10:00:06,444 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-18 10:00:06,444 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-18 10:00:06,444 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 10:00:06,445 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 10:00:06,445 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729094216114
2024-10-18 10:00:06,446 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 3 messages
2024-10-18 10:00:06,446 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 10:00:07,257 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 10:00:07,258 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 10:00:07,258 - controllers.conversation_controller - DEBUG - conversation_controller.py:94 - Final extracted plan: {
  "product_name": null,
  "product_description": null,
  "product_family": "GSM",
  "product_group": "Prepaid",
  "product_offer_price": "5",
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-18 10:00:07,343 - controllers.missing_info_controller - INFO - missing_info_controller.py:14 - Received missing info request for conversation ID: conv_1729094216114
2024-10-18 10:00:07,345 - services.missing_info_service - INFO - missing_info_service.py:15 - Initializing MissingInfoAdapter
2024-10-18 10:57:21,828 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-18 10:57:21,861 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-18 10:57:21,878 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-18 10:58:36,956 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-18 10:58:36,967 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-18 10:58:36,977 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-18 10:59:30,869 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729229370783
2024-10-18 10:59:30,870 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "yes i want to create voice offer with 5$ price and 10 days validity"
  }
]
2024-10-18 10:59:30,870 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 10:59:30,871 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 10:59:30,871 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 10:59:40,845 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-18 10:59:40,846 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-18 10:59:40,846 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 10:59:40,846 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 10:59:40,846 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729229370783
2024-10-18 10:59:40,847 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-18 10:59:40,847 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 10:59:41,613 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 10:59:41,614 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 10:59:41,614 - controllers.conversation_controller - DEBUG - conversation_controller.py:94 - Final extracted plan: {
  "product_name": null,
  "product_description": null,
  "product_family": "GSM",
  "product_group": "Prepaid",
  "product_offer_price": "5",
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-18 10:59:42,972 - controllers.missing_info_controller - INFO - missing_info_controller.py:14 - Received missing info request for conversation ID: conv_1729229370783
2024-10-18 10:59:42,972 - services.missing_info_service - INFO - missing_info_service.py:15 - Initializing MissingInfoAdapter
2024-10-18 10:59:42,972 - services.missing_info_service - INFO - missing_info_service.py:32 - missing info request : conversationId='conv_1729229370783' currentMessage=MessageItem(messageTime='2024-10-18 10:59:41', messageId='msg_1729229370783', source='bpe', status='failed', messageType='text', payload=MessageContent(text="The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.", image=None)) sender=User(name='User', phoneNumber='conv_01JAF1KCB4KK1JTGQVJRSECKC3') previousMessages=[MessageItem(messageTime='2024-10-18 10:59:30', messageId='msg_1729229370783', source='ui', status='success', messageType='text', payload=MessageContent(text='yes i want to create voice offer with 5$ price and 10 days validity', image=None))]
2024-10-18 10:59:42,973 - services.missing_info_service - INFO - missing_info_service.py:34 - Processing missing info request for field: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
2024-10-18 10:59:42,973 - services.missing_info_service - DEBUG - missing_info_service.py:18 - Generating missing info prompt for field: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
2024-10-18 10:59:42,973 - services.missing_info_service - DEBUG - missing_info_service.py:27 - Generated prompt: 
      As a sales executive named AARYA (Automated AI Responder for Your Applications), you are having a conversation with a customer about creating a  plan. The customer has provided some information, but the 'The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.' is missing. Your task is to generate a polite and professional response asking for the missing information.

      Conversation history:
      [
  {
    "role": "user",
    "content": "yes i want to create voice offer with 5$ price and 10 days validity"
  }
]

      Missing information: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
      here the messages gives out what information is missing extract the missing info from the message 

      Please generate a response  asking for the missing information .
      make it short and simple 
      make the tune of the message in common language 
      only give response 
      
2024-10-18 10:59:42,973 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 10:59:43,373 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here is a polite and professional response asking for the missing information:

"What is the name of the product you'd like to create a voice offer for?"
2024-10-18 10:59:43,374 - services.missing_info_service - DEBUG - missing_info_service.py:37 - Missing info response: Here is a polite and professional response asking for the missing information:

"What is the name of the product you'd like to create a voice offer for?"
2024-10-18 10:59:43,374 - controllers.missing_info_controller - DEBUG - missing_info_controller.py:18 - Missing info response: Here is a polite and professional response asking for the missing information:

"What is the name of the product you'd like to create a voice offer for?"
2024-10-18 12:41:48,950 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729094216114
2024-10-18 12:41:48,951 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "proceed"
  },
  {
    "role": "assistant",
    "content": "Here is my response:\n\n\"Great to get started! Before we begin creating a product for you, could you please provide some details about what you have in mind? What kind of product are you looking for, and what features would you like it to have?\""
  },
  {
    "role": "user",
    "content": "yes i want to create voice offer with 5$ price and 10 days validity"
  },
  {
    "role": "user",
    "content": "yes"
  }
]
2024-10-18 12:41:48,951 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:41:48,951 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:41:48,952 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:42:00,235 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-18 12:42:00,235 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-18 12:42:00,235 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 12:42:00,235 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 12:42:00,235 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729094216114
2024-10-18 12:42:00,236 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 4 messages
2024-10-18 12:42:00,236 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:42:01,068 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:42:01,069 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:42:01,069 - controllers.conversation_controller - DEBUG - conversation_controller.py:94 - Final extracted plan: {
  "product_name": null,
  "product_description": null,
  "product_family": "GSM",
  "product_group": "Prepaid",
  "product_offer_price": "5",
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-18 12:42:01,149 - controllers.missing_info_controller - INFO - missing_info_controller.py:14 - Received missing info request for conversation ID: conv_1729094216114
2024-10-18 12:42:01,149 - services.missing_info_service - INFO - missing_info_service.py:15 - Initializing MissingInfoAdapter
2024-10-18 12:42:01,149 - services.missing_info_service - INFO - missing_info_service.py:32 - missing info request : conversationId='conv_1729094216114' currentMessage=MessageItem(messageTime='2024-10-18 12:42:01', messageId='msg_1729235508854', source='bpe', status='failed', messageType='text', payload=MessageContent(text="The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.", image=None)) sender=User(name='User', phoneNumber='conv_01JAASJ0MPNFAMDSRQXB94NK0C') previousMessages=[MessageItem(messageTime='2024-10-16 21:26:56', messageId='msg_1729094216114', source='ui', status='success', messageType='text', payload=MessageContent(text='proceed', image=None)), MessageItem(messageTime='2024-10-16 21:26:57', messageId='msg_1729094216114', source='AI', status='success', messageType='text', payload=MessageContent(text='Here is my response:\n\n"Great to get started! Before we begin creating a product for you, could you please provide some details about what you have in mind? What kind of product are you looking for, and what features would you like it to have?"', image=None)), MessageItem(messageTime='2024-10-18 09:59:52', messageId='msg_1729225792386', source='ui', status='success', messageType='text', payload=MessageContent(text='yes i want to create voice offer with 5$ price and 10 days validity', image=None)), MessageItem(messageTime='2024-10-18 12:41:48', messageId='msg_1729235508854', source='ui', status='success', messageType='text', payload=MessageContent(text='yes', image=None))]
2024-10-18 12:42:01,150 - services.missing_info_service - INFO - missing_info_service.py:34 - Processing missing info request for field: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
2024-10-18 12:42:01,150 - services.missing_info_service - DEBUG - missing_info_service.py:18 - Generating missing info prompt for field: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
2024-10-18 12:42:01,150 - services.missing_info_service - DEBUG - missing_info_service.py:27 - Generated prompt: 
      As a sales executive named AARYA (Automated AI Responder for Your Applications), you are having a conversation with a customer about creating a  plan. The customer has provided some information, but the 'The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.' is missing. Your task is to generate a polite and professional response asking for the missing information.

      Conversation history:
      [
  {
    "role": "user",
    "content": "proceed"
  },
  {
    "role": "assistant",
    "content": "Here is my response:\n\n\"Great to get started! Before we begin creating a product for you, could you please provide some details about what you have in mind? What kind of product are you looking for, and what features would you like it to have?\""
  },
  {
    "role": "user",
    "content": "yes i want to create voice offer with 5$ price and 10 days validity"
  },
  {
    "role": "user",
    "content": "yes"
  }
]

      Missing information: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
      here the messages gives out what information is missing extract the missing info from the message 

      Please generate a response  asking for the missing information .
      make it short and simple 
      make the tune of the message in common language 
      only give response 
      
2024-10-18 12:42:01,150 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:42:01,596 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: "Hi, I'm happy to help you with your voice offer plan! Before we move forward, could you please tell me what you'd like to name your product? This will help me create a personalized plan for you."
2024-10-18 12:42:01,596 - services.missing_info_service - DEBUG - missing_info_service.py:37 - Missing info response: "Hi, I'm happy to help you with your voice offer plan! Before we move forward, could you please tell me what you'd like to name your product? This will help me create a personalized plan for you."
2024-10-18 12:42:01,596 - controllers.missing_info_controller - DEBUG - missing_info_controller.py:18 - Missing info response: "Hi, I'm happy to help you with your voice offer plan! Before we move forward, could you please tell me what you'd like to name your product? This will help me create a personalized plan for you."
2024-10-18 12:42:06,988 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729094216114
2024-10-18 12:42:06,989 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "proceed"
  },
  {
    "role": "assistant",
    "content": "Here is my response:\n\n\"Great to get started! Before we begin creating a product for you, could you please provide some details about what you have in mind? What kind of product are you looking for, and what features would you like it to have?\""
  },
  {
    "role": "user",
    "content": "yes i want to create voice offer with 5$ price and 10 days validity"
  },
  {
    "role": "user",
    "content": "yes"
  },
  {
    "role": "assistant",
    "content": "\"Hi, I'm happy to help you with your voice offer plan! Before we move forward, could you please tell me what you'd like to name your product? This will help me create a personalized plan for you.\""
  },
  {
    "role": "user",
    "content": "create offer of 5$ with 1 week validity"
  }
]
2024-10-18 12:42:06,989 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:42:06,989 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:42:06,989 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:42:07,362 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-18 12:42:07,362 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-18 12:42:07,362 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 12:42:07,362 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 12:42:07,362 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729094216114
2024-10-18 12:42:07,363 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 6 messages
2024-10-18 12:42:07,363 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:42:08,115 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:42:08,116 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:42:08,116 - controllers.conversation_controller - DEBUG - conversation_controller.py:94 - Final extracted plan: {
  "product_name": "",
  "product_description": "",
  "product_family": "GSM",
  "product_group": "Prepaid",
  "product_offer_price": "5",
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-18 12:42:08,400 - controllers.missing_info_controller - INFO - missing_info_controller.py:14 - Received missing info request for conversation ID: conv_1729094216114
2024-10-18 12:42:08,400 - services.missing_info_service - INFO - missing_info_service.py:15 - Initializing MissingInfoAdapter
2024-10-18 12:42:08,400 - services.missing_info_service - INFO - missing_info_service.py:32 - missing info request : conversationId='conv_1729094216114' currentMessage=MessageItem(messageTime='2024-10-18 12:42:08', messageId='msg_1729235526875', source='bpe', status='failed', messageType='text', payload=MessageContent(text="The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.", image=None)) sender=User(name='User', phoneNumber='conv_01JAASJ0MPNFAMDSRQXB94NK0C') previousMessages=[MessageItem(messageTime='2024-10-16 21:26:56', messageId='msg_1729094216114', source='ui', status='success', messageType='text', payload=MessageContent(text='proceed', image=None)), MessageItem(messageTime='2024-10-16 21:26:57', messageId='msg_1729094216114', source='AI', status='success', messageType='text', payload=MessageContent(text='Here is my response:\n\n"Great to get started! Before we begin creating a product for you, could you please provide some details about what you have in mind? What kind of product are you looking for, and what features would you like it to have?"', image=None)), MessageItem(messageTime='2024-10-18 09:59:52', messageId='msg_1729225792386', source='ui', status='success', messageType='text', payload=MessageContent(text='yes i want to create voice offer with 5$ price and 10 days validity', image=None)), MessageItem(messageTime='2024-10-18 12:41:48', messageId='msg_1729235508854', source='ui', status='success', messageType='text', payload=MessageContent(text='yes', image=None)), MessageItem(messageTime='2024-10-18 12:42:01', messageId='msg_1729235508854', source='AI', status='success', messageType='text', payload=MessageContent(text='"Hi, I\'m happy to help you with your voice offer plan! Before we move forward, could you please tell me what you\'d like to name your product? This will help me create a personalized plan for you."', image=None)), MessageItem(messageTime='2024-10-18 12:42:06', messageId='msg_1729235526875', source='ui', status='success', messageType='text', payload=MessageContent(text='create offer of 5$ with 1 week validity', image=None))]
2024-10-18 12:42:08,401 - services.missing_info_service - INFO - missing_info_service.py:34 - Processing missing info request for field: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
2024-10-18 12:42:08,401 - services.missing_info_service - DEBUG - missing_info_service.py:18 - Generating missing info prompt for field: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
2024-10-18 12:42:08,401 - services.missing_info_service - DEBUG - missing_info_service.py:27 - Generated prompt: 
      As a sales executive named AARYA (Automated AI Responder for Your Applications), you are having a conversation with a customer about creating a  plan. The customer has provided some information, but the 'The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.' is missing. Your task is to generate a polite and professional response asking for the missing information.

      Conversation history:
      [
  {
    "role": "user",
    "content": "proceed"
  },
  {
    "role": "assistant",
    "content": "Here is my response:\n\n\"Great to get started! Before we begin creating a product for you, could you please provide some details about what you have in mind? What kind of product are you looking for, and what features would you like it to have?\""
  },
  {
    "role": "user",
    "content": "yes i want to create voice offer with 5$ price and 10 days validity"
  },
  {
    "role": "user",
    "content": "yes"
  },
  {
    "role": "assistant",
    "content": "\"Hi, I'm happy to help you with your voice offer plan! Before we move forward, could you please tell me what you'd like to name your product? This will help me create a personalized plan for you.\""
  },
  {
    "role": "user",
    "content": "create offer of 5$ with 1 week validity"
  }
]

      Missing information: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
      here the messages gives out what information is missing extract the missing info from the message 

      Please generate a response  asking for the missing information .
      make it short and simple 
      make the tune of the message in common language 
      only give response 
      
2024-10-18 12:42:08,401 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:42:08,814 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: "Hey! We're almost there. Can you please tell me what you'd like to name your voice offer product? This will help me finalize your plan."
2024-10-18 12:42:08,814 - services.missing_info_service - DEBUG - missing_info_service.py:37 - Missing info response: "Hey! We're almost there. Can you please tell me what you'd like to name your voice offer product? This will help me finalize your plan."
2024-10-18 12:42:08,814 - controllers.missing_info_controller - DEBUG - missing_info_controller.py:18 - Missing info response: "Hey! We're almost there. Can you please tell me what you'd like to name your voice offer product? This will help me finalize your plan."
2024-10-18 12:42:29,867 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729094216114
2024-10-18 12:42:29,867 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "proceed"
  },
  {
    "role": "assistant",
    "content": "Here is my response:\n\n\"Great to get started! Before we begin creating a product for you, could you please provide some details about what you have in mind? What kind of product are you looking for, and what features would you like it to have?\""
  },
  {
    "role": "user",
    "content": "yes i want to create voice offer with 5$ price and 10 days validity"
  },
  {
    "role": "user",
    "content": "yes"
  },
  {
    "role": "assistant",
    "content": "\"Hi, I'm happy to help you with your voice offer plan! Before we move forward, could you please tell me what you'd like to name your product? This will help me create a personalized plan for you.\""
  },
  {
    "role": "user",
    "content": "create offer of 5$ with 1 week validity"
  },
  {
    "role": "assistant",
    "content": "\"Hey! We're almost there. Can you please tell me what you'd like to name your voice offer product? This will help me finalize your plan.\""
  },
  {
    "role": "user",
    "content": "voice econet offer"
  }
]
2024-10-18 12:42:29,868 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:42:29,868 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:42:29,868 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:42:30,247 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-18 12:42:30,248 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-18 12:42:30,248 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 12:42:30,248 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 12:42:30,248 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729094216114
2024-10-18 12:42:30,248 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 8 messages
2024-10-18 12:42:30,248 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:42:31,020 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'voice econet offer', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:42:31,021 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'voice econet offer', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:42:31,021 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:42:31,330 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-18 12:42:31,330 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:42:33,175 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: voice econet offer
• Product Description: 
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 5
• Pop Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-18 12:42:33,176 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-18 12:42:42,692 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729094216114
2024-10-18 12:42:42,693 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "proceed"
  },
  {
    "role": "assistant",
    "content": "Here is my response:\n\n\"Great to get started! Before we begin creating a product for you, could you please provide some details about what you have in mind? What kind of product are you looking for, and what features would you like it to have?\""
  },
  {
    "role": "user",
    "content": "yes i want to create voice offer with 5$ price and 10 days validity"
  },
  {
    "role": "user",
    "content": "yes"
  },
  {
    "role": "assistant",
    "content": "\"Hi, I'm happy to help you with your voice offer plan! Before we move forward, could you please tell me what you'd like to name your product? This will help me create a personalized plan for you.\""
  },
  {
    "role": "user",
    "content": "create offer of 5$ with 1 week validity"
  },
  {
    "role": "assistant",
    "content": "\"Hey! We're almost there. Can you please tell me what you'd like to name your voice offer product? This will help me finalize your plan.\""
  },
  {
    "role": "user",
    "content": "voice econet offer"
  },
  {
    "role": "assistant",
    "content": "Here are the details of your product with all mandatory default parameters enabled:\n\n\u2022 Product Name: voice econet offer\n\u2022 Product Description: \n\u2022 Product Family: GSM\n\u2022 Product Group: Prepaid\n\u2022 Product Offer Price: 5\n\u2022 Pop Type: Normal\n\u2022 Price Category: Base Price\n\u2022 Price Mode: Non-Recurring\n\u2022 Product Specification Type: ADDON\n\nWould you like to update any of these details or proceed as is?"
  },
  {
    "role": "user",
    "content": "yes"
  }
]
2024-10-18 12:42:42,693 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:42:42,693 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:42:42,694 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:42:55,998 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: { "classification": "product_related" }
2024-10-18 12:42:55,998 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: { "classification": "product_related" }
2024-10-18 12:42:55,998 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 12:42:55,998 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 12:42:55,999 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729094216114
2024-10-18 12:42:55,999 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 10 messages
2024-10-18 12:42:55,999 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:43:03,000 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'voice econet offer', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:43:03,000 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'voice econet offer', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '5', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:43:03,000 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:43:22,639 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: True
2024-10-18 12:43:22,639 - controllers.conversation_controller - INFO - conversation_controller.py:67 - Product creation confirmed
2024-10-18 12:44:34,863 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729235674804
2024-10-18 12:44:34,864 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "thanks"
  }
]
2024-10-18 12:44:34,864 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:44:34,865 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:44:34,865 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:44:35,258 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {"classification": "general_conversation"}
2024-10-18 12:44:35,259 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {"classification": "general_conversation"}
2024-10-18 12:44:35,259 - utils.helpers - INFO - helpers.py:24 - Message classified as: general_conversation
2024-10-18 12:44:35,259 - controllers.conversation_controller - INFO - conversation_controller.py:106 - Handling general conversation
2024-10-18 12:44:35,259 - services.conversation_service - INFO - conversation_service.py:48 - Handling general conversation
2024-10-18 12:44:35,259 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:44:35,621 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: You're welcome! Is there anything else I can assist you with today?
2024-10-18 12:44:35,621 - services.conversation_service - DEBUG - conversation_service.py:51 - General conversation response: You're welcome! Is there anything else I can assist you with today?
2024-10-18 12:44:35,621 - controllers.conversation_controller - DEBUG - conversation_controller.py:108 - General conversation response: You're welcome! Is there anything else I can assist you with today?
2024-10-18 12:45:08,520 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729235674804
2024-10-18 12:45:08,521 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "thanks"
  },
  {
    "role": "assistant",
    "content": "You're welcome! Is there anything else I can assist you with today?"
  },
  {
    "role": "user",
    "content": "no"
  }
]
2024-10-18 12:45:08,521 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:45:08,521 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:45:08,521 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:45:09,042 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {"classification": "general_conversation"}
2024-10-18 12:45:09,043 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {"classification": "general_conversation"}
2024-10-18 12:45:09,043 - utils.helpers - INFO - helpers.py:24 - Message classified as: general_conversation
2024-10-18 12:45:09,043 - controllers.conversation_controller - INFO - conversation_controller.py:106 - Handling general conversation
2024-10-18 12:45:09,043 - services.conversation_service - INFO - conversation_service.py:48 - Handling general conversation
2024-10-18 12:45:09,044 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:45:09,574 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!
2024-10-18 12:45:09,575 - services.conversation_service - DEBUG - conversation_service.py:51 - General conversation response: It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!
2024-10-18 12:45:09,575 - controllers.conversation_controller - DEBUG - conversation_controller.py:108 - General conversation response: It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!
2024-10-18 12:57:55,065 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729235674804
2024-10-18 12:57:55,067 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "thanks"
  },
  {
    "role": "assistant",
    "content": "You're welcome! Is there anything else I can assist you with today?"
  },
  {
    "role": "user",
    "content": "no"
  },
  {
    "role": "assistant",
    "content": "It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!"
  },
  {
    "role": "user",
    "content": "reset"
  }
]
2024-10-18 12:57:55,067 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:57:55,067 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:57:55,067 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:58:04,457 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "general_conversation"
}
2024-10-18 12:58:04,458 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "general_conversation"
}
2024-10-18 12:58:04,458 - utils.helpers - INFO - helpers.py:24 - Message classified as: general_conversation
2024-10-18 12:58:04,458 - controllers.conversation_controller - INFO - conversation_controller.py:106 - Handling general conversation
2024-10-18 12:58:04,458 - services.conversation_service - INFO - conversation_service.py:48 - Handling general conversation
2024-10-18 12:58:04,458 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:58:05,515 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?
2024-10-18 12:58:05,516 - services.conversation_service - DEBUG - conversation_service.py:51 - General conversation response: It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?
2024-10-18 12:58:05,516 - controllers.conversation_controller - DEBUG - conversation_controller.py:108 - General conversation response: It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?
2024-10-18 12:58:15,972 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729235674804
2024-10-18 12:58:15,973 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "thanks"
  },
  {
    "role": "assistant",
    "content": "You're welcome! Is there anything else I can assist you with today?"
  },
  {
    "role": "user",
    "content": "no"
  },
  {
    "role": "assistant",
    "content": "It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!"
  },
  {
    "role": "user",
    "content": "reset"
  },
  {
    "role": "assistant",
    "content": "It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?"
  },
  {
    "role": "user",
    "content": "hi"
  }
]
2024-10-18 12:58:15,973 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:58:15,973 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:58:15,974 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:58:16,363 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "general_conversation"
}
2024-10-18 12:58:16,363 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "general_conversation"
}
2024-10-18 12:58:16,363 - utils.helpers - INFO - helpers.py:24 - Message classified as: general_conversation
2024-10-18 12:58:16,363 - controllers.conversation_controller - INFO - conversation_controller.py:106 - Handling general conversation
2024-10-18 12:58:16,363 - services.conversation_service - INFO - conversation_service.py:48 - Handling general conversation
2024-10-18 12:58:16,364 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:58:16,725 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Hi! I'm happy to help. What brings you here today?
2024-10-18 12:58:16,725 - services.conversation_service - DEBUG - conversation_service.py:51 - General conversation response: Hi! I'm happy to help. What brings you here today?
2024-10-18 12:58:16,726 - controllers.conversation_controller - DEBUG - conversation_controller.py:108 - General conversation response: Hi! I'm happy to help. What brings you here today?
2024-10-18 12:58:31,256 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729235674804
2024-10-18 12:58:31,257 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "thanks"
  },
  {
    "role": "assistant",
    "content": "You're welcome! Is there anything else I can assist you with today?"
  },
  {
    "role": "user",
    "content": "no"
  },
  {
    "role": "assistant",
    "content": "It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!"
  },
  {
    "role": "user",
    "content": "reset"
  },
  {
    "role": "assistant",
    "content": "It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?"
  },
  {
    "role": "user",
    "content": "hi"
  },
  {
    "role": "assistant",
    "content": "Hi! I'm happy to help. What brings you here today?"
  },
  {
    "role": "user",
    "content": "i want to create offer"
  }
]
2024-10-18 12:58:31,257 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:58:31,257 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:58:31,257 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:58:31,646 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: { "classification": "product_related" }
2024-10-18 12:58:31,646 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: { "classification": "product_related" }
2024-10-18 12:58:31,646 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 12:58:31,647 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 12:58:31,647 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729235674804
2024-10-18 12:58:31,647 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 9 messages
2024-10-18 12:58:31,647 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:58:32,386 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': None, 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:58:32,387 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': None, 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:58:32,387 - controllers.conversation_controller - DEBUG - conversation_controller.py:94 - Final extracted plan: {
  "product_name": null,
  "product_description": null,
  "product_family": "GSM",
  "product_group": "Prepaid",
  "product_offer_price": null,
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-18 12:58:32,460 - controllers.missing_info_controller - INFO - missing_info_controller.py:14 - Received missing info request for conversation ID: conv_1729235674804
2024-10-18 12:58:32,460 - services.missing_info_service - INFO - missing_info_service.py:15 - Initializing MissingInfoAdapter
2024-10-18 12:58:32,461 - services.missing_info_service - INFO - missing_info_service.py:32 - missing info request : conversationId='conv_1729235674804' currentMessage=MessageItem(messageTime='2024-10-18 12:58:32', messageId='msg_1729236511200', source='bpe', status='failed', messageType='text', payload=MessageContent(text="The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.", image=None)) sender=User(name='User', phoneNumber='conv_01JAASJ0MPNFAMDSRQXB94NK0C') previousMessages=[MessageItem(messageTime='2024-10-18 12:44:34', messageId='msg_1729235674804', source='ui', status='success', messageType='text', payload=MessageContent(text='thanks', image=None)), MessageItem(messageTime='2024-10-18 12:44:35', messageId='msg_1729235674804', source='AI', status='success', messageType='text', payload=MessageContent(text="You're welcome! Is there anything else I can assist you with today?", image=None)), MessageItem(messageTime='2024-10-18 12:45:08', messageId='msg_1729235708460', source='ui', status='success', messageType='text', payload=MessageContent(text='no', image=None)), MessageItem(messageTime='2024-10-18 12:45:09', messageId='msg_1729235708460', source='AI', status='success', messageType='text', payload=MessageContent(text="It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!", image=None)), MessageItem(messageTime='2024-10-18 12:57:54', messageId='msg_1729236474983', source='ui', status='success', messageType='text', payload=MessageContent(text='reset', image=None)), MessageItem(messageTime='2024-10-18 12:58:05', messageId='msg_1729236474983', source='AI', status='success', messageType='text', payload=MessageContent(text="It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?", image=None)), MessageItem(messageTime='2024-10-18 12:58:15', messageId='msg_1729236495882', source='ui', status='success', messageType='text', payload=MessageContent(text='hi', image=None)), MessageItem(messageTime='2024-10-18 12:58:16', messageId='msg_1729236495882', source='AI', status='success', messageType='text', payload=MessageContent(text="Hi! I'm happy to help. What brings you here today?", image=None)), MessageItem(messageTime='2024-10-18 12:58:31', messageId='msg_1729236511200', source='ui', status='success', messageType='text', payload=MessageContent(text='i want to create offer', image=None))]
2024-10-18 12:58:32,461 - services.missing_info_service - INFO - missing_info_service.py:34 - Processing missing info request for field: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
2024-10-18 12:58:32,461 - services.missing_info_service - DEBUG - missing_info_service.py:18 - Generating missing info prompt for field: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
2024-10-18 12:58:32,462 - services.missing_info_service - DEBUG - missing_info_service.py:27 - Generated prompt: 
      As a sales executive named AARYA (Automated AI Responder for Your Applications), you are having a conversation with a customer about creating a  plan. The customer has provided some information, but the 'The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.' is missing. Your task is to generate a polite and professional response asking for the missing information.

      Conversation history:
      [
  {
    "role": "user",
    "content": "thanks"
  },
  {
    "role": "assistant",
    "content": "You're welcome! Is there anything else I can assist you with today?"
  },
  {
    "role": "user",
    "content": "no"
  },
  {
    "role": "assistant",
    "content": "It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!"
  },
  {
    "role": "user",
    "content": "reset"
  },
  {
    "role": "assistant",
    "content": "It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?"
  },
  {
    "role": "user",
    "content": "hi"
  },
  {
    "role": "assistant",
    "content": "Hi! I'm happy to help. What brings you here today?"
  },
  {
    "role": "user",
    "content": "i want to create offer"
  }
]

      Missing information: The field Product Name is missing. The field Product Name meaning in layman's terms is Product's name/Name of the Product. Please provide it.
      here the messages gives out what information is missing extract the missing info from the message 

      Please generate a response  asking for the missing information .
      make it short and simple 
      make the tune of the message in common language 
      only give response 
      
2024-10-18 12:58:32,462 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:58:32,891 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: "What's the name of the product you'd like to create an offer for? Could you please provide that so I can better assist you?"
2024-10-18 12:58:32,892 - services.missing_info_service - DEBUG - missing_info_service.py:37 - Missing info response: "What's the name of the product you'd like to create an offer for? Could you please provide that so I can better assist you?"
2024-10-18 12:58:32,892 - controllers.missing_info_controller - DEBUG - missing_info_controller.py:18 - Missing info response: "What's the name of the product you'd like to create an offer for? Could you please provide that so I can better assist you?"
2024-10-18 12:58:46,228 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729235674804
2024-10-18 12:58:46,229 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "thanks"
  },
  {
    "role": "assistant",
    "content": "You're welcome! Is there anything else I can assist you with today?"
  },
  {
    "role": "user",
    "content": "no"
  },
  {
    "role": "assistant",
    "content": "It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!"
  },
  {
    "role": "user",
    "content": "reset"
  },
  {
    "role": "assistant",
    "content": "It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?"
  },
  {
    "role": "user",
    "content": "hi"
  },
  {
    "role": "assistant",
    "content": "Hi! I'm happy to help. What brings you here today?"
  },
  {
    "role": "user",
    "content": "i want to create offer"
  },
  {
    "role": "assistant",
    "content": "\"What's the name of the product you'd like to create an offer for? Could you please provide that so I can better assist you?\""
  },
  {
    "role": "user",
    "content": "data offer"
  }
]
2024-10-18 12:58:46,229 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:58:46,229 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:58:46,229 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:58:46,660 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-18 12:58:46,660 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-18 12:58:46,660 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 12:58:46,661 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 12:58:46,661 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729235674804
2024-10-18 12:58:46,661 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 11 messages
2024-10-18 12:58:46,661 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:58:47,406 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'data offer', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': None, 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:58:47,406 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'data offer', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': None, 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:58:47,406 - controllers.conversation_controller - DEBUG - conversation_controller.py:94 - Final extracted plan: {
  "product_name": "data offer",
  "product_description": null,
  "product_family": "GSM",
  "product_group": "Prepaid",
  "product_offer_price": null,
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-18 12:58:47,488 - controllers.missing_info_controller - INFO - missing_info_controller.py:14 - Received missing info request for conversation ID: conv_1729235674804
2024-10-18 12:58:47,488 - services.missing_info_service - INFO - missing_info_service.py:15 - Initializing MissingInfoAdapter
2024-10-18 12:58:47,489 - services.missing_info_service - INFO - missing_info_service.py:32 - missing info request : conversationId='conv_1729235674804' currentMessage=MessageItem(messageTime='2024-10-18 12:58:47', messageId='msg_1729236526148', source='bpe', status='failed', messageType='text', payload=MessageContent(text="The field Product price is missing. The field Product price meaning in layman's terms is Product's offer price/price of the product. Please provide it.", image=None)) sender=User(name='User', phoneNumber='conv_01JAASJ0MPNFAMDSRQXB94NK0C') previousMessages=[MessageItem(messageTime='2024-10-18 12:44:34', messageId='msg_1729235674804', source='ui', status='success', messageType='text', payload=MessageContent(text='thanks', image=None)), MessageItem(messageTime='2024-10-18 12:44:35', messageId='msg_1729235674804', source='AI', status='success', messageType='text', payload=MessageContent(text="You're welcome! Is there anything else I can assist you with today?", image=None)), MessageItem(messageTime='2024-10-18 12:45:08', messageId='msg_1729235708460', source='ui', status='success', messageType='text', payload=MessageContent(text='no', image=None)), MessageItem(messageTime='2024-10-18 12:45:09', messageId='msg_1729235708460', source='AI', status='success', messageType='text', payload=MessageContent(text="It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!", image=None)), MessageItem(messageTime='2024-10-18 12:57:54', messageId='msg_1729236474983', source='ui', status='success', messageType='text', payload=MessageContent(text='reset', image=None)), MessageItem(messageTime='2024-10-18 12:58:05', messageId='msg_1729236474983', source='AI', status='success', messageType='text', payload=MessageContent(text="It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?", image=None)), MessageItem(messageTime='2024-10-18 12:58:15', messageId='msg_1729236495882', source='ui', status='success', messageType='text', payload=MessageContent(text='hi', image=None)), MessageItem(messageTime='2024-10-18 12:58:16', messageId='msg_1729236495882', source='AI', status='success', messageType='text', payload=MessageContent(text="Hi! I'm happy to help. What brings you here today?", image=None)), MessageItem(messageTime='2024-10-18 12:58:31', messageId='msg_1729236511200', source='ui', status='success', messageType='text', payload=MessageContent(text='i want to create offer', image=None)), MessageItem(messageTime='2024-10-18 12:58:32', messageId='msg_1729236511200', source='AI', status='success', messageType='text', payload=MessageContent(text='"What\'s the name of the product you\'d like to create an offer for? Could you please provide that so I can better assist you?"', image=None)), MessageItem(messageTime='2024-10-18 12:58:46', messageId='msg_1729236526148', source='ui', status='success', messageType='text', payload=MessageContent(text='data offer', image=None))]
2024-10-18 12:58:47,489 - services.missing_info_service - INFO - missing_info_service.py:34 - Processing missing info request for field: The field Product price is missing. The field Product price meaning in layman's terms is Product's offer price/price of the product. Please provide it.
2024-10-18 12:58:47,489 - services.missing_info_service - DEBUG - missing_info_service.py:18 - Generating missing info prompt for field: The field Product price is missing. The field Product price meaning in layman's terms is Product's offer price/price of the product. Please provide it.
2024-10-18 12:58:47,490 - services.missing_info_service - DEBUG - missing_info_service.py:27 - Generated prompt: 
      As a sales executive named AARYA (Automated AI Responder for Your Applications), you are having a conversation with a customer about creating a  plan. The customer has provided some information, but the 'The field Product price is missing. The field Product price meaning in layman's terms is Product's offer price/price of the product. Please provide it.' is missing. Your task is to generate a polite and professional response asking for the missing information.

      Conversation history:
      [
  {
    "role": "user",
    "content": "thanks"
  },
  {
    "role": "assistant",
    "content": "You're welcome! Is there anything else I can assist you with today?"
  },
  {
    "role": "user",
    "content": "no"
  },
  {
    "role": "assistant",
    "content": "It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!"
  },
  {
    "role": "user",
    "content": "reset"
  },
  {
    "role": "assistant",
    "content": "It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?"
  },
  {
    "role": "user",
    "content": "hi"
  },
  {
    "role": "assistant",
    "content": "Hi! I'm happy to help. What brings you here today?"
  },
  {
    "role": "user",
    "content": "i want to create offer"
  },
  {
    "role": "assistant",
    "content": "\"What's the name of the product you'd like to create an offer for? Could you please provide that so I can better assist you?\""
  },
  {
    "role": "user",
    "content": "data offer"
  }
]

      Missing information: The field Product price is missing. The field Product price meaning in layman's terms is Product's offer price/price of the product. Please provide it.
      here the messages gives out what information is missing extract the missing info from the message 

      Please generate a response  asking for the missing information .
      make it short and simple 
      make the tune of the message in common language 
      only give response 
      
2024-10-18 12:58:47,490 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:58:47,919 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: "Could you please tell me how much the 'data offer' product costs? We need the offer price or price of the product to move forward."
2024-10-18 12:58:47,919 - services.missing_info_service - DEBUG - missing_info_service.py:37 - Missing info response: "Could you please tell me how much the 'data offer' product costs? We need the offer price or price of the product to move forward."
2024-10-18 12:58:47,919 - controllers.missing_info_controller - DEBUG - missing_info_controller.py:18 - Missing info response: "Could you please tell me how much the 'data offer' product costs? We need the offer price or price of the product to move forward."
2024-10-18 12:59:01,459 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729235674804
2024-10-18 12:59:01,459 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "thanks"
  },
  {
    "role": "assistant",
    "content": "You're welcome! Is there anything else I can assist you with today?"
  },
  {
    "role": "user",
    "content": "no"
  },
  {
    "role": "assistant",
    "content": "It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!"
  },
  {
    "role": "user",
    "content": "reset"
  },
  {
    "role": "assistant",
    "content": "It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?"
  },
  {
    "role": "user",
    "content": "hi"
  },
  {
    "role": "assistant",
    "content": "Hi! I'm happy to help. What brings you here today?"
  },
  {
    "role": "user",
    "content": "i want to create offer"
  },
  {
    "role": "assistant",
    "content": "\"What's the name of the product you'd like to create an offer for? Could you please provide that so I can better assist you?\""
  },
  {
    "role": "user",
    "content": "data offer"
  },
  {
    "role": "assistant",
    "content": "\"Could you please tell me how much the 'data offer' product costs? We need the offer price or price of the product to move forward.\""
  },
  {
    "role": "user",
    "content": "6$"
  }
]
2024-10-18 12:59:01,460 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:59:01,460 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:59:01,460 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:59:01,869 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: { "classification": "product_related" }
2024-10-18 12:59:01,869 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: { "classification": "product_related" }
2024-10-18 12:59:01,869 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 12:59:01,869 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 12:59:01,870 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729235674804
2024-10-18 12:59:01,870 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 13 messages
2024-10-18 12:59:01,870 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:59:02,738 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'data offer', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '6', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:59:02,738 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'data offer', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '6', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:59:02,739 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:59:06,348 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-18 12:59:06,349 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:59:09,233 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: data offer
• Product Description: No Description
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 6
• Pop Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-18 12:59:09,234 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-18 12:59:34,428 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729235674804
2024-10-18 12:59:34,429 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "thanks"
  },
  {
    "role": "assistant",
    "content": "You're welcome! Is there anything else I can assist you with today?"
  },
  {
    "role": "user",
    "content": "no"
  },
  {
    "role": "assistant",
    "content": "It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!"
  },
  {
    "role": "user",
    "content": "reset"
  },
  {
    "role": "assistant",
    "content": "It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?"
  },
  {
    "role": "user",
    "content": "hi"
  },
  {
    "role": "assistant",
    "content": "Hi! I'm happy to help. What brings you here today?"
  },
  {
    "role": "user",
    "content": "i want to create offer"
  },
  {
    "role": "assistant",
    "content": "\"What's the name of the product you'd like to create an offer for? Could you please provide that so I can better assist you?\""
  },
  {
    "role": "user",
    "content": "data offer"
  },
  {
    "role": "assistant",
    "content": "\"Could you please tell me how much the 'data offer' product costs? We need the offer price or price of the product to move forward.\""
  },
  {
    "role": "user",
    "content": "6$"
  },
  {
    "role": "assistant",
    "content": "Here are the details of your product with all mandatory default parameters enabled:\n\n\u2022 Product Name: data offer\n\u2022 Product Description: No Description\n\u2022 Product Family: GSM\n\u2022 Product Group: Prepaid\n\u2022 Product Offer Price: 6\n\u2022 Pop Type: Normal\n\u2022 Price Category: Base Price\n\u2022 Price Mode: Non-Recurring\n\u2022 Product Specification Type: ADDON\n\nWould you like to update any of these details or proceed as is?"
  },
  {
    "role": "user",
    "content": "no"
  }
]
2024-10-18 12:59:34,429 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 12:59:34,429 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 12:59:34,430 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:59:34,861 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-18 12:59:34,862 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-18 12:59:34,862 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 12:59:34,862 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 12:59:34,862 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729235674804
2024-10-18 12:59:34,862 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 15 messages
2024-10-18 12:59:34,863 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:59:35,645 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'data offer', 'product_description': 'No Description', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '6', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:59:35,645 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'data offer', 'product_description': 'No Description', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '6', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 12:59:35,645 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:59:46,405 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-18 12:59:46,405 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 12:59:49,326 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: data offer
• Product Description: No Description
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 6
• POP Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-18 12:59:49,327 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-18 13:01:30,113 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729235674804
2024-10-18 13:01:30,113 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "thanks"
  },
  {
    "role": "assistant",
    "content": "You're welcome! Is there anything else I can assist you with today?"
  },
  {
    "role": "user",
    "content": "no"
  },
  {
    "role": "assistant",
    "content": "It seems like our conversation just ended! You thanked me, I asked if there's anything else I can help you with, and you said no. If you change your mind or need something in the future, feel free to reach out! Have a great day!"
  },
  {
    "role": "user",
    "content": "reset"
  },
  {
    "role": "assistant",
    "content": "It seems like you want to start fresh! Let's begin a new conversation. How can I assist you today?"
  },
  {
    "role": "user",
    "content": "hi"
  },
  {
    "role": "assistant",
    "content": "Hi! I'm happy to help. What brings you here today?"
  },
  {
    "role": "user",
    "content": "i want to create offer"
  },
  {
    "role": "assistant",
    "content": "\"What's the name of the product you'd like to create an offer for? Could you please provide that so I can better assist you?\""
  },
  {
    "role": "user",
    "content": "data offer"
  },
  {
    "role": "assistant",
    "content": "\"Could you please tell me how much the 'data offer' product costs? We need the offer price or price of the product to move forward.\""
  },
  {
    "role": "user",
    "content": "6$"
  },
  {
    "role": "assistant",
    "content": "Here are the details of your product with all mandatory default parameters enabled:\n\n\u2022 Product Name: data offer\n\u2022 Product Description: No Description\n\u2022 Product Family: GSM\n\u2022 Product Group: Prepaid\n\u2022 Product Offer Price: 6\n\u2022 Pop Type: Normal\n\u2022 Price Category: Base Price\n\u2022 Price Mode: Non-Recurring\n\u2022 Product Specification Type: ADDON\n\nWould you like to update any of these details or proceed as is?"
  },
  {
    "role": "user",
    "content": "no"
  },
  {
    "role": "assistant",
    "content": "Here are the details of your product with all mandatory default parameters enabled:\n\n\u2022 Product Name: data offer\n\u2022 Product Description: No Description\n\u2022 Product Family: GSM\n\u2022 Product Group: Prepaid\n\u2022 Product Offer Price: 6\n\u2022 POP Type: Normal\n\u2022 Price Category: Base Price\n\u2022 Price Mode: Non-Recurring\n\u2022 Product Specification Type: ADDON\n\nWould you like to update any of these details or proceed as is?"
  },
  {
    "role": "user",
    "content": "yes"
  }
]
2024-10-18 13:01:30,114 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 13:01:30,114 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 13:01:30,114 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 13:01:30,559 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-18 13:01:30,559 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-18 13:01:30,560 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-18 13:01:30,560 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-18 13:01:30,560 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv_1729235674804
2024-10-18 13:01:30,560 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 17 messages
2024-10-18 13:01:30,561 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 13:01:31,395 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'data offer', 'product_description': 'No Description', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '6', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 13:01:31,396 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'data offer', 'product_description': 'No Description', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '6', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-18 13:01:31,396 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 13:01:31,772 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: True
2024-10-18 13:01:31,773 - controllers.conversation_controller - INFO - conversation_controller.py:67 - Product creation confirmed
2024-10-18 13:02:13,647 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv_1729236733592
2024-10-18 13:02:13,648 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "ok"
  }
]
2024-10-18 13:02:13,648 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-18 13:02:13,648 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-18 13:02:13,648 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 13:02:14,061 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: { "classification": "general_conversation" }
2024-10-18 13:02:14,061 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: { "classification": "general_conversation" }
2024-10-18 13:02:14,062 - utils.helpers - INFO - helpers.py:24 - Message classified as: general_conversation
2024-10-18 13:02:14,062 - controllers.conversation_controller - INFO - conversation_controller.py:106 - Handling general conversation
2024-10-18 13:02:14,062 - services.conversation_service - INFO - conversation_service.py:48 - Handling general conversation
2024-10-18 13:02:14,062 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-18 13:02:14,450 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Hi there! It seems like you're ready to start creating a product. What kind of product are you thinking of?
2024-10-18 13:02:14,450 - services.conversation_service - DEBUG - conversation_service.py:51 - General conversation response: Hi there! It seems like you're ready to start creating a product. What kind of product are you thinking of?
2024-10-18 13:02:14,451 - controllers.conversation_controller - DEBUG - conversation_controller.py:108 - General conversation response: Hi there! It seems like you're ready to start creating a product. What kind of product are you thinking of?
2024-10-20 13:23:12,055 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-20 13:23:12,096 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-20 13:23:12,130 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-21 11:08:09,597 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-21 11:08:09,612 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-21 11:08:09,623 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-21 12:54:41,519 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 12:55:00,851 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 12:55:00,851 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 12:55:00,852 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 12:55:01,973 - services.ai_client_service - ERROR - ai_client_service.py:92 - Error in OpenAI image API call: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 192, in retry_sync
    response = func(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_utils/_utils.py", line 274, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/resources/chat/completions.py", line 742, in create
    return self._post(
           ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1277, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 954, in request
    return self._request(
           ^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1058, in _request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 189, in retry_sync
    for attempt in max_retries:
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 443, in __iter__
    do = self.iter(retry_state=retry_state)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 376, in iter
    result = action(retry_state)
             ^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 419, in exc_check
    raise retry_exc from fut.exception()
tenacity.RetryError: RetryError[<Future at 0x106602d10 state=finished raised BadRequestError>]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/ai_client_service.py", line 76, in make_image_api_call
    response = image_client.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/patch.py", line 291, in new_create_sync
    response = retry_sync(
               ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 227, in retry_sync
    raise InstructorRetryException(
instructor.exceptions.InstructorRetryException: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
2024-10-21 12:55:01,981 - controllers.conversation_controller - ERROR - conversation_controller.py:120 - Error in conversation_endpoint: 500: Error in Groq API call: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 192, in retry_sync
    response = func(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_utils/_utils.py", line 274, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/resources/chat/completions.py", line 742, in create
    return self._post(
           ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1277, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 954, in request
    return self._request(
           ^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1058, in _request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 189, in retry_sync
    for attempt in max_retries:
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 443, in __iter__
    do = self.iter(retry_state=retry_state)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 376, in iter
    result = action(retry_state)
             ^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 419, in exc_check
    raise retry_exc from fut.exception()
tenacity.RetryError: RetryError[<Future at 0x106602d10 state=finished raised BadRequestError>]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/ai_client_service.py", line 76, in make_image_api_call
    response = image_client.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/patch.py", line 291, in new_create_sync
    response = retry_sync(
               ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 227, in retry_sync
    raise InstructorRetryException(
instructor.exceptions.InstructorRetryException: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sachinpb/PycharmProjects/upc_image_text/controllers/conversation_controller.py", line 42, in conversation_endpoint
    extracted_content = image_processor.extract_image_content(image_data)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/image_processor_service.py", line 11, in extract_image_content
    content = make_image_api_call(Prompts.IMAGE_PRODUCT_EXTRACTION, image_data)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/ai_client_service.py", line 93, in make_image_api_call
    raise APICallError(Config.SELECTED_MODEL.value, str(e))
exceptions.APICallError: 500: Error in Groq API call: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
2024-10-21 12:56:35,253 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 12:56:42,420 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 12:56:42,421 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 12:56:42,421 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 12:56:43,445 - services.ai_client_service - ERROR - ai_client_service.py:92 - Error in OpenAI image API call: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 192, in retry_sync
    response = func(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_utils/_utils.py", line 274, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/resources/chat/completions.py", line 742, in create
    return self._post(
           ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1277, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 954, in request
    return self._request(
           ^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1058, in _request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 189, in retry_sync
    for attempt in max_retries:
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 443, in __iter__
    do = self.iter(retry_state=retry_state)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 376, in iter
    result = action(retry_state)
             ^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 419, in exc_check
    raise retry_exc from fut.exception()
tenacity.RetryError: RetryError[<Future at 0x107519690 state=finished raised BadRequestError>]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/ai_client_service.py", line 76, in make_image_api_call
    response = image_client.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/patch.py", line 291, in new_create_sync
    response = retry_sync(
               ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 227, in retry_sync
    raise InstructorRetryException(
instructor.exceptions.InstructorRetryException: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
2024-10-21 12:56:43,447 - controllers.conversation_controller - ERROR - conversation_controller.py:120 - Error in conversation_endpoint: 500: Error in Groq API call: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 192, in retry_sync
    response = func(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_utils/_utils.py", line 274, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/resources/chat/completions.py", line 742, in create
    return self._post(
           ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1277, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 954, in request
    return self._request(
           ^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1058, in _request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 189, in retry_sync
    for attempt in max_retries:
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 443, in __iter__
    do = self.iter(retry_state=retry_state)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 376, in iter
    result = action(retry_state)
             ^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 419, in exc_check
    raise retry_exc from fut.exception()
tenacity.RetryError: RetryError[<Future at 0x107519690 state=finished raised BadRequestError>]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/ai_client_service.py", line 76, in make_image_api_call
    response = image_client.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/patch.py", line 291, in new_create_sync
    response = retry_sync(
               ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 227, in retry_sync
    raise InstructorRetryException(
instructor.exceptions.InstructorRetryException: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sachinpb/PycharmProjects/upc_image_text/controllers/conversation_controller.py", line 42, in conversation_endpoint
    extracted_content = image_processor.extract_image_content(image_data)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/image_processor_service.py", line 11, in extract_image_content
    content = make_image_api_call(Prompts.IMAGE_PRODUCT_EXTRACTION, image_data)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/ai_client_service.py", line 93, in make_image_api_call
    raise APICallError(Config.SELECTED_MODEL.value, str(e))
exceptions.APICallError: 500: Error in Groq API call: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
2024-10-21 12:58:08,541 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 12:58:09,680 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 12:58:09,681 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 12:58:09,681 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 12:58:10,487 - services.ai_client_service - ERROR - ai_client_service.py:92 - Error in OpenAI image API call: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 192, in retry_sync
    response = func(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_utils/_utils.py", line 274, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/resources/chat/completions.py", line 742, in create
    return self._post(
           ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1277, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 954, in request
    return self._request(
           ^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1058, in _request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 189, in retry_sync
    for attempt in max_retries:
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 443, in __iter__
    do = self.iter(retry_state=retry_state)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 376, in iter
    result = action(retry_state)
             ^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 419, in exc_check
    raise retry_exc from fut.exception()
tenacity.RetryError: RetryError[<Future at 0x10752ba10 state=finished raised BadRequestError>]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/ai_client_service.py", line 76, in make_image_api_call
    response = image_client.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/patch.py", line 291, in new_create_sync
    response = retry_sync(
               ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 227, in retry_sync
    raise InstructorRetryException(
instructor.exceptions.InstructorRetryException: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
2024-10-21 12:58:10,489 - controllers.conversation_controller - ERROR - conversation_controller.py:120 - Error in conversation_endpoint: 500: Error in Groq API call: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 192, in retry_sync
    response = func(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_utils/_utils.py", line 274, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/resources/chat/completions.py", line 742, in create
    return self._post(
           ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1277, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 954, in request
    return self._request(
           ^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/openai/_base_client.py", line 1058, in _request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 189, in retry_sync
    for attempt in max_retries:
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 443, in __iter__
    do = self.iter(retry_state=retry_state)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 376, in iter
    result = action(retry_state)
             ^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/tenacity/__init__.py", line 419, in exc_check
    raise retry_exc from fut.exception()
tenacity.RetryError: RetryError[<Future at 0x10752ba10 state=finished raised BadRequestError>]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/ai_client_service.py", line 76, in make_image_api_call
    response = image_client.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/patch.py", line 291, in new_create_sync
    response = retry_sync(
               ^^^^^^^^^^^
  File "/opt/homebrew/anaconda3/envs/upc/lib/python3.11/site-packages/instructor/retry.py", line 227, in retry_sync
    raise InstructorRetryException(
instructor.exceptions.InstructorRetryException: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sachinpb/PycharmProjects/upc_image_text/controllers/conversation_controller.py", line 42, in conversation_endpoint
    extracted_content = image_processor.extract_image_content(image_data)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/image_processor_service.py", line 11, in extract_image_content
    content = make_image_api_call(Prompts.IMAGE_PRODUCT_EXTRACTION, image_data)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/sachinpb/PycharmProjects/upc_image_text/services/ai_client_service.py", line 93, in make_image_api_call
    raise APICallError(Config.SELECTED_MODEL.value, str(e))
exceptions.APICallError: 500: Error in Groq API call: Error code: 400 - {'error': {'message': 'Invalid base64 image_url.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_base64'}}
2024-10-21 12:59:59,775 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-21 12:59:59,789 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-21 12:59:59,801 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-21 13:00:09,541 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 13:00:10,500 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 13:00:10,501 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 13:00:16,312 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 13:01:07,590 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-21 13:01:07,605 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-21 13:01:07,616 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-21 13:01:11,523 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 13:01:12,157 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 13:01:12,158 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 13:01:16,621 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 13:01:31,851 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here’s the extracted content in JSON format based on the provided image:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "off_net_minutes": 0,
    "on_net_minutes": 20,
    "peak_minutes": 10
  },
  "duration": "Not specified",
  "price": 0.60
}
``` 

Feel free to adjust any fields as necessary!
2024-10-21 13:01:51,493 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here’s the extracted content in JSON format based on the provided image:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "off_net_minutes": 0,
    "on_net_minutes": 20,
    "peak_minutes": 10
  },
  "duration": "Not specified",
  "price": 0.60
}
``` 

Feel free to adjust any fields as necessary!
2024-10-21 13:01:55,551 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Here’s the extracted content in JSON format based on the provided image:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "off_net_minutes": 0,
    "on_net_minutes": 20,
    "peak_minutes": 10
  },
  "duration": "Not specified",
  "price": 0.60
}
``` 

Feel free to adjust any fields as necessary!
2024-10-21 13:02:29,529 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Here\u2019s the extracted content in JSON format based on the provided image:\n\n```json\n{\n  \"plan_name\": \"BOJ\",\n  \"validity\": \"Not specified\",\n  \"units\": {\n    \"off_net_minutes\": 0,\n    \"on_net_minutes\": 20,\n    \"peak_minutes\": 10\n  },\n  \"duration\": \"Not specified\",\n  \"price\": 0.60\n}\n``` \n\nFeel free to adjust any fields as necessary!"
  }
]
2024-10-21 13:02:30,090 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 13:02:30,090 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 13:02:30,091 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:02:31,136 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"Classification": "product_related"
}
2024-10-21 13:02:31,136 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"Classification": "product_related"
}
2024-10-21 13:02:31,137 - utils.helpers - ERROR - helpers.py:33 - KeyError in classification response: 'classification'
2024-10-21 13:02:31,137 - utils.helpers - DEBUG - helpers.py:34 - Response data that caused the error: {'Classification': 'product_related'}
2024-10-21 13:02:31,996 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 13:02:33,730 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 13:02:33,730 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 13:02:33,731 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:02:34,725 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'BOJ', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:02:34,726 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'BOJ', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:02:34,726 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:02:35,240 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-21 13:02:35,241 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:02:35,944 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: BOJ
• Product Description: None
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 0.60
• POP Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 13:02:35,945 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-21 13:36:39,237 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-21 13:36:39,253 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-21 13:36:39,266 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-21 13:37:05,574 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 13:37:06,098 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 13:37:06,098 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 13:37:06,099 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 13:37:10,645 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Based on the content extracted from the image, here is the corresponding JSON representation:

```json
{
    "plan_name": "BOJ",
    "validity": "unknown",
    "units": {
        "offnet_minutes": 0,
        "onnet_minutes": 20,
        "peak_minutes": 10
    },
    "duration": "unknown",
    "price": "$0.60"
}
``` 

Note: Validity and duration are not specified in the image, so they are marked as "unknown."
2024-10-21 13:37:10,646 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Based on the content extracted from the image, here is the corresponding JSON representation:

```json
{
    "plan_name": "BOJ",
    "validity": "unknown",
    "units": {
        "offnet_minutes": 0,
        "onnet_minutes": 20,
        "peak_minutes": 10
    },
    "duration": "unknown",
    "price": "$0.60"
}
``` 

Note: Validity and duration are not specified in the image, so they are marked as "unknown."
2024-10-21 13:37:10,646 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Based on the content extracted from the image, here is the corresponding JSON representation:

```json
{
    "plan_name": "BOJ",
    "validity": "unknown",
    "units": {
        "offnet_minutes": 0,
        "onnet_minutes": 20,
        "peak_minutes": 10
    },
    "duration": "unknown",
    "price": "$0.60"
}
``` 

Note: Validity and duration are not specified in the image, so they are marked as "unknown."
2024-10-21 13:37:10,647 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Based on the content extracted from the image, here is the corresponding JSON representation:\n\n```json\n{\n    \"plan_name\": \"BOJ\",\n    \"validity\": \"unknown\",\n    \"units\": {\n        \"offnet_minutes\": 0,\n        \"onnet_minutes\": 20,\n        \"peak_minutes\": 10\n    },\n    \"duration\": \"unknown\",\n    \"price\": \"$0.60\"\n}\n``` \n\nNote: Validity and duration are not specified in the image, so they are marked as \"unknown.\""
  }
]
2024-10-21 13:37:10,647 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 13:37:10,647 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 13:37:10,648 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:37:11,836 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 13:37:11,837 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 13:37:11,837 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 13:37:11,837 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 13:37:11,838 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 13:37:11,838 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 13:37:11,839 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:37:13,153 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:37:13,153 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:37:13,153 - controllers.conversation_controller - DEBUG - conversation_controller.py:94 - Final extracted plan: {
  "product_name": null,
  "product_description": null,
  "product_family": "GSM",
  "product_group": "Prepaid",
  "product_offer_price": "0.60",
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-21 13:43:10,651 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 13:43:16,960 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 13:43:16,961 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 13:43:16,961 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 13:43:20,880 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here is the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": "4 Weeks",
  "price": "20 OMR"
}
```
2024-10-21 13:43:20,880 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here is the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": "4 Weeks",
  "price": "20 OMR"
}
```
2024-10-21 13:43:20,881 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Here is the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": "4 Weeks",
  "price": "20 OMR"
}
```
2024-10-21 13:43:20,881 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Here is the extracted content in JSON format:\n\n```json\n{\n  \"plan_name\": \"Hayyak 20\",\n  \"validity\": \"4 Weeks\",\n  \"units\": {\n    \"data_allowance\": \"34 GB\",\n    \"flexi_minutes\": \"650 min\"\n  },\n  \"duration\": \"4 Weeks\",\n  \"price\": \"20 OMR\"\n}\n```"
  }
]
2024-10-21 13:43:20,881 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 13:43:20,882 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 13:43:20,882 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:43:21,789 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 13:43:21,790 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 13:43:21,790 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 13:43:21,790 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 13:43:21,790 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 13:43:21,791 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 13:43:21,791 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:43:22,914 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:43:22,914 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:43:22,915 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:43:23,644 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-21 13:43:23,645 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:43:24,563 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: Hayyak 20
• Product Description: None
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 20
• POP Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 13:43:24,563 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-21 13:49:16,252 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 13:49:16,794 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 13:49:16,795 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 13:49:16,796 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 13:49:19,970 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here is the extracted content formatted in JSON:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 13:49:19,971 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here is the extracted content formatted in JSON:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 13:49:19,971 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Here is the extracted content formatted in JSON:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 13:49:19,972 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Here is the extracted content formatted in JSON:\n\n```json\n{\n  \"plan_name\": \"Hayyak 20\",\n  \"validity\": \"4 Weeks\",\n  \"units\": {\n    \"data_allowance\": \"34 GB\",\n    \"flexi_minutes\": \"650 min\"\n  },\n  \"price\": \"20 OMR\"\n}\n```"
  }
]
2024-10-21 13:49:19,972 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 13:49:19,972 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 13:49:19,972 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:49:20,703 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 13:49:20,704 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 13:49:20,704 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 13:49:20,705 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 13:49:20,705 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 13:49:20,705 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 13:49:20,706 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:49:21,833 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:49:21,833 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:49:21,834 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:49:22,529 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-21 13:49:22,530 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:49:23,439 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled

• Product Name: Hayyak 20
• Product Description: null
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 20
• POP Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 13:49:23,440 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-21 13:52:11,513 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 13:52:12,041 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 13:52:12,041 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 13:52:12,041 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 13:52:14,975 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Based on the provided image, here is the extracted content formatted as JSON:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "OffNet": "0 Min",
    "OnNet": "20 Min",
    "Peak": "10 Min"
  },
  "duration": "Not specified",
  "price": "$0.60"
}
```

Note: The validity and duration were not specified in the image content.
2024-10-21 13:52:14,976 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Based on the provided image, here is the extracted content formatted as JSON:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "OffNet": "0 Min",
    "OnNet": "20 Min",
    "Peak": "10 Min"
  },
  "duration": "Not specified",
  "price": "$0.60"
}
```

Note: The validity and duration were not specified in the image content.
2024-10-21 13:52:14,976 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Based on the provided image, here is the extracted content formatted as JSON:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "OffNet": "0 Min",
    "OnNet": "20 Min",
    "Peak": "10 Min"
  },
  "duration": "Not specified",
  "price": "$0.60"
}
```

Note: The validity and duration were not specified in the image content.
2024-10-21 13:52:14,976 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Based on the provided image, here is the extracted content formatted as JSON:\n\n```json\n{\n  \"plan_name\": \"BOJ\",\n  \"validity\": \"Not specified\",\n  \"units\": {\n    \"OffNet\": \"0 Min\",\n    \"OnNet\": \"20 Min\",\n    \"Peak\": \"10 Min\"\n  },\n  \"duration\": \"Not specified\",\n  \"price\": \"$0.60\"\n}\n```\n\nNote: The validity and duration were not specified in the image content."
  }
]
2024-10-21 13:52:14,977 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 13:52:14,977 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 13:52:14,978 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:52:15,958 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: { "classification": "product_related" }
2024-10-21 13:52:15,959 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: { "classification": "product_related" }
2024-10-21 13:52:15,959 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 13:52:15,959 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 13:52:15,960 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 13:52:15,960 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 13:52:15,960 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:52:17,126 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'BOJ', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:52:17,127 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'BOJ', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:52:17,127 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:52:17,843 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-21 13:52:17,844 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:52:18,783 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: BOJ
• Product Description: null
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 0.60
• POP Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 13:52:18,784 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-21 13:52:31,078 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 13:53:46,082 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 13:53:46,083 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 13:53:46,083 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 13:53:48,813 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here’s the extracted content in JSON format:

```json
{
  "plan_name": "BOJ",
  "validity": "",
  "units": {
    "off_net": "0 Min",
    "on_net": "20 Min",
    "peak": "10 Min"
  },
  "duration": "",
  "price": "$0.60"
}
``` 

Note: The validity and duration fields are empty because that information is not provided in the text.
2024-10-21 13:53:48,813 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here’s the extracted content in JSON format:

```json
{
  "plan_name": "BOJ",
  "validity": "",
  "units": {
    "off_net": "0 Min",
    "on_net": "20 Min",
    "peak": "10 Min"
  },
  "duration": "",
  "price": "$0.60"
}
``` 

Note: The validity and duration fields are empty because that information is not provided in the text.
2024-10-21 13:53:48,814 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Here’s the extracted content in JSON format:

```json
{
  "plan_name": "BOJ",
  "validity": "",
  "units": {
    "off_net": "0 Min",
    "on_net": "20 Min",
    "peak": "10 Min"
  },
  "duration": "",
  "price": "$0.60"
}
``` 

Note: The validity and duration fields are empty because that information is not provided in the text.
2024-10-21 13:53:48,814 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Here\u2019s the extracted content in JSON format:\n\n```json\n{\n  \"plan_name\": \"BOJ\",\n  \"validity\": \"\",\n  \"units\": {\n    \"off_net\": \"0 Min\",\n    \"on_net\": \"20 Min\",\n    \"peak\": \"10 Min\"\n  },\n  \"duration\": \"\",\n  \"price\": \"$0.60\"\n}\n``` \n\nNote: The validity and duration fields are empty because that information is not provided in the text."
  }
]
2024-10-21 13:53:48,814 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 13:53:48,814 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 13:53:48,814 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:53:49,550 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 13:53:49,550 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 13:53:49,551 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 13:53:49,551 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 13:53:49,551 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 13:53:49,552 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 13:53:49,552 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:53:50,825 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:53:50,826 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:53:50,826 - controllers.conversation_controller - DEBUG - conversation_controller.py:94 - Final extracted plan: {
  "product_name": "",
  "product_description": "",
  "product_family": "GSM",
  "product_group": "Prepaid",
  "product_offer_price": "0.60",
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-21 13:55:58,192 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 13:57:13,196 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 13:57:13,197 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 13:57:13,198 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 13:57:16,394 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Based on the content extracted from the image, here is the JSON representation:

```json
{
  "plan_name": "BOJ",
  "validity": "0 Min OffNet, 20 Min OnNet",
  "units": {
    "OffNet": "0 Min",
    "OnNet": "20 Min"
  },
  "duration": "Peak 10 Min",
  "price": "$0.60"
}
```
2024-10-21 13:57:16,395 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Based on the content extracted from the image, here is the JSON representation:

```json
{
  "plan_name": "BOJ",
  "validity": "0 Min OffNet, 20 Min OnNet",
  "units": {
    "OffNet": "0 Min",
    "OnNet": "20 Min"
  },
  "duration": "Peak 10 Min",
  "price": "$0.60"
}
```
2024-10-21 13:57:16,395 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Based on the content extracted from the image, here is the JSON representation:

```json
{
  "plan_name": "BOJ",
  "validity": "0 Min OffNet, 20 Min OnNet",
  "units": {
    "OffNet": "0 Min",
    "OnNet": "20 Min"
  },
  "duration": "Peak 10 Min",
  "price": "$0.60"
}
```
2024-10-21 13:57:16,396 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Based on the content extracted from the image, here is the JSON representation:\n\n```json\n{\n  \"plan_name\": \"BOJ\",\n  \"validity\": \"0 Min OffNet, 20 Min OnNet\",\n  \"units\": {\n    \"OffNet\": \"0 Min\",\n    \"OnNet\": \"20 Min\"\n  },\n  \"duration\": \"Peak 10 Min\",\n  \"price\": \"$0.60\"\n}\n```"
  }
]
2024-10-21 13:57:16,396 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 13:57:16,396 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 13:57:16,396 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:57:17,229 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 13:57:17,230 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 13:57:17,230 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 13:57:17,231 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 13:57:17,231 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 13:57:17,231 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 13:57:17,231 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:57:18,389 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'BOJ', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:57:18,389 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'BOJ', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 13:57:18,389 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:57:19,101 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-21 13:57:19,102 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 13:57:20,025 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: BOJ
• Product Description: None
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 0.60
• Pop Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 13:57:20,025 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-21 13:58:57,298 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 14:00:12,320 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 14:00:12,321 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 14:00:12,322 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 14:00:19,039 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Based on the content of the image, here is the JSON representation:

```json
{
  "plan_name": "BOJ OffNet",
  "validity": "Not specified",
  "units": {
    "off_net_minutes": 0,
    "on_net_minutes": 20,
    "peak_minutes": 10
  },
  "duration": "Not specified",
  "price": "$0.60"
}
``` 

Feel free to modify any of the values as needed!
2024-10-21 14:00:19,040 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Based on the content of the image, here is the JSON representation:

```json
{
  "plan_name": "BOJ OffNet",
  "validity": "Not specified",
  "units": {
    "off_net_minutes": 0,
    "on_net_minutes": 20,
    "peak_minutes": 10
  },
  "duration": "Not specified",
  "price": "$0.60"
}
``` 

Feel free to modify any of the values as needed!
2024-10-21 14:00:19,040 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Based on the content of the image, here is the JSON representation:

```json
{
  "plan_name": "BOJ OffNet",
  "validity": "Not specified",
  "units": {
    "off_net_minutes": 0,
    "on_net_minutes": 20,
    "peak_minutes": 10
  },
  "duration": "Not specified",
  "price": "$0.60"
}
``` 

Feel free to modify any of the values as needed!
2024-10-21 14:00:19,041 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Based on the content of the image, here is the JSON representation:\n\n```json\n{\n  \"plan_name\": \"BOJ OffNet\",\n  \"validity\": \"Not specified\",\n  \"units\": {\n    \"off_net_minutes\": 0,\n    \"on_net_minutes\": 20,\n    \"peak_minutes\": 10\n  },\n  \"duration\": \"Not specified\",\n  \"price\": \"$0.60\"\n}\n``` \n\nFeel free to modify any of the values as needed!"
  }
]
2024-10-21 14:00:19,041 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 14:00:19,041 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 14:00:19,041 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:00:19,754 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: { "classification": "product_related" }
2024-10-21 14:00:19,755 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: { "classification": "product_related" }
2024-10-21 14:00:19,755 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 14:00:19,756 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 14:00:19,756 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 14:00:19,756 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 14:00:19,757 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:00:20,986 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'BOJ OffNet', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:00:20,987 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'BOJ OffNet', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:00:20,987 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:00:21,596 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-21 14:00:21,597 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:00:22,621 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: BOJ OffNet
• Product Description: No description provided
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 0.60
• POP Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 14:00:22,622 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-21 14:00:30,060 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 14:01:45,065 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 14:01:45,066 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 14:01:45,067 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 14:01:49,356 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here's the extracted content from the image formatted in JSON:

```json
{
  "plan_name": "BOJ",
  "validity": "N/A",
  "units": {
    "off_net": "0 Min",
    "on_net": "20 Min",
    "peak": "10 Min"
  },
  "duration": "N/A",
  "price": "$0.60"
}
```
2024-10-21 14:01:49,357 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here's the extracted content from the image formatted in JSON:

```json
{
  "plan_name": "BOJ",
  "validity": "N/A",
  "units": {
    "off_net": "0 Min",
    "on_net": "20 Min",
    "peak": "10 Min"
  },
  "duration": "N/A",
  "price": "$0.60"
}
```
2024-10-21 14:01:49,357 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Here's the extracted content from the image formatted in JSON:

```json
{
  "plan_name": "BOJ",
  "validity": "N/A",
  "units": {
    "off_net": "0 Min",
    "on_net": "20 Min",
    "peak": "10 Min"
  },
  "duration": "N/A",
  "price": "$0.60"
}
```
2024-10-21 14:01:49,357 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Here's the extracted content from the image formatted in JSON:\n\n```json\n{\n  \"plan_name\": \"BOJ\",\n  \"validity\": \"N/A\",\n  \"units\": {\n    \"off_net\": \"0 Min\",\n    \"on_net\": \"20 Min\",\n    \"peak\": \"10 Min\"\n  },\n  \"duration\": \"N/A\",\n  \"price\": \"$0.60\"\n}\n```"
  }
]
2024-10-21 14:01:49,357 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 14:01:49,358 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 14:01:49,358 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:01:50,100 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 14:01:50,101 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 14:01:50,101 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 14:01:50,101 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 14:01:50,101 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 14:01:50,101 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 14:01:50,102 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:01:51,212 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'BOJ', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:01:51,212 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'BOJ', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:01:51,213 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:01:51,812 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-21 14:01:51,813 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:01:52,733 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: BOJ
• Product Description: None
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 0.60
• Pop Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 14:01:52,733 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-21 14:04:03,587 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 14:05:18,592 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 14:05:18,592 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 14:05:18,593 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 14:05:22,556 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Based on the content extracted from the image, here's the JSON representation:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "off_net_minutes": "0",
    "on_net_minutes": "20",
    "peak_minutes": "10"
  },
  "duration": "Not specified",
  "price": "$0.60"
}
```
2024-10-21 14:05:22,557 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Based on the content extracted from the image, here's the JSON representation:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "off_net_minutes": "0",
    "on_net_minutes": "20",
    "peak_minutes": "10"
  },
  "duration": "Not specified",
  "price": "$0.60"
}
```
2024-10-21 14:05:22,557 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Based on the content extracted from the image, here's the JSON representation:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "off_net_minutes": "0",
    "on_net_minutes": "20",
    "peak_minutes": "10"
  },
  "duration": "Not specified",
  "price": "$0.60"
}
```
2024-10-21 14:05:22,557 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Based on the content extracted from the image, here's the JSON representation:\n\n```json\n{\n  \"plan_name\": \"BOJ\",\n  \"validity\": \"Not specified\",\n  \"units\": {\n    \"off_net_minutes\": \"0\",\n    \"on_net_minutes\": \"20\",\n    \"peak_minutes\": \"10\"\n  },\n  \"duration\": \"Not specified\",\n  \"price\": \"$0.60\"\n}\n```"
  }
]
2024-10-21 14:05:22,558 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 14:05:22,558 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 14:05:22,558 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:05:23,476 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 14:05:23,477 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 14:05:23,477 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 14:05:23,478 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 14:05:23,478 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 14:05:23,478 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 14:05:23,478 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:05:25,424 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:05:25,425 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:05:25,425 - controllers.conversation_controller - DEBUG - conversation_controller.py:94 - Final extracted plan: {
  "product_name": null,
  "product_description": null,
  "product_family": "GSM",
  "product_group": "Prepaid",
  "product_offer_price": "0.60",
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-21 14:09:55,959 - controllers.conversation_controller - INFO - conversation_controller.py:18 - Received conversation request for conversation ID: conv-12345
2024-10-21 14:11:10,964 - controllers.conversation_controller - INFO - conversation_controller.py:38 - Processing image message
2024-10-21 14:11:10,965 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 14:11:10,966 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 14:11:14,404 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here is the extracted content from the image formatted in JSON:

```json
{
  "plan_name": "BOJ OffNet",
  "validity": null,
  "units": {
    "off_net_minutes": 0,
    "on_net_minutes": 20,
    "peak_minutes": 10
  },
  "duration": null,
  "price": "$0.60"
}
```

Note: The validity and duration fields are marked as null since that information is not provided in the image.
2024-10-21 14:11:14,404 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here is the extracted content from the image formatted in JSON:

```json
{
  "plan_name": "BOJ OffNet",
  "validity": null,
  "units": {
    "off_net_minutes": 0,
    "on_net_minutes": 20,
    "peak_minutes": 10
  },
  "duration": null,
  "price": "$0.60"
}
```

Note: The validity and duration fields are marked as null since that information is not provided in the image.
2024-10-21 14:11:14,405 - controllers.conversation_controller - DEBUG - conversation_controller.py:43 - Extracted content from image: Here is the extracted content from the image formatted in JSON:

```json
{
  "plan_name": "BOJ OffNet",
  "validity": null,
  "units": {
    "off_net_minutes": 0,
    "on_net_minutes": 20,
    "peak_minutes": 10
  },
  "duration": null,
  "price": "$0.60"
}
```

Note: The validity and duration fields are marked as null since that information is not provided in the image.
2024-10-21 14:11:14,405 - controllers.conversation_controller - DEBUG - conversation_controller.py:58 - Formatted messages: [
  {
    "role": "user",
    "content": "Here is the extracted content from the image formatted in JSON:\n\n```json\n{\n  \"plan_name\": \"BOJ OffNet\",\n  \"validity\": null,\n  \"units\": {\n    \"off_net_minutes\": 0,\n    \"on_net_minutes\": 20,\n    \"peak_minutes\": 10\n  },\n  \"duration\": null,\n  \"price\": \"$0.60\"\n}\n```\n\nNote: The validity and duration fields are marked as null since that information is not provided in the image."
  }
]
2024-10-21 14:11:14,406 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 14:11:14,406 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 14:11:14,406 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:11:15,243 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 14:11:15,243 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 14:11:15,244 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 14:11:15,244 - controllers.conversation_controller - INFO - conversation_controller.py:61 - Conversation is product-related
2024-10-21 14:11:15,244 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 14:11:15,244 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 14:11:15,245 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:11:16,555 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'BOJ OffNet', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:11:16,556 - controllers.conversation_controller - DEBUG - conversation_controller.py:63 - Extracted plan: {'product_name': 'BOJ OffNet', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:11:16,556 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:11:17,125 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: False
2024-10-21 14:11:17,126 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:11:18,089 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: BOJ OffNet
• Product Description: None
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 0.60
• Pop Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 14:11:18,090 - controllers.conversation_controller - INFO - conversation_controller.py:80 - Sending final confirmation message
2024-10-21 14:30:49,974 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-21 14:30:49,988 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-21 14:30:50,000 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-21 14:31:03,202 - controllers.conversation_controller - INFO - conversation_controller.py:20 - Received conversation request for conversation ID: conv-12345
2024-10-21 14:31:10,547 - controllers.conversation_controller - INFO - conversation_controller.py:42 - Processing image message
2024-10-21 14:31:10,548 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 14:31:10,550 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 14:31:15,881 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Based on the content extracted from the image, here is the JSON representation:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "off_net": "0 Min",
    "on_net": "20 Min",
    "peak": "10 Min"
  },
  "duration": "Not specified",
  "price": "$0.60"
}
```
2024-10-21 14:31:15,882 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Based on the content extracted from the image, here is the JSON representation:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "off_net": "0 Min",
    "on_net": "20 Min",
    "peak": "10 Min"
  },
  "duration": "Not specified",
  "price": "$0.60"
}
```
2024-10-21 14:31:15,882 - controllers.conversation_controller - DEBUG - conversation_controller.py:47 - Extracted content from image: Based on the content extracted from the image, here is the JSON representation:

```json
{
  "plan_name": "BOJ",
  "validity": "Not specified",
  "units": {
    "off_net": "0 Min",
    "on_net": "20 Min",
    "peak": "10 Min"
  },
  "duration": "Not specified",
  "price": "$0.60"
}
```
2024-10-21 14:31:15,882 - controllers.conversation_controller - DEBUG - conversation_controller.py:62 - Formatted messages: [
  {
    "role": "user",
    "content": "Based on the content extracted from the image, here is the JSON representation:\n\n```json\n{\n  \"plan_name\": \"BOJ\",\n  \"validity\": \"Not specified\",\n  \"units\": {\n    \"off_net\": \"0 Min\",\n    \"on_net\": \"20 Min\",\n    \"peak\": \"10 Min\"\n  },\n  \"duration\": \"Not specified\",\n  \"price\": \"$0.60\"\n}\n```"
  }
]
2024-10-21 14:31:15,882 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 14:31:15,883 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 14:31:15,883 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:31:17,104 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 14:31:17,105 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 14:31:17,105 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 14:31:17,105 - controllers.conversation_controller - INFO - conversation_controller.py:65 - Conversation is product-related
2024-10-21 14:31:17,105 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 14:31:17,106 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 14:31:17,106 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:31:18,349 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:31:18,350 - controllers.conversation_controller - DEBUG - conversation_controller.py:67 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '0.60', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:31:18,350 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:31:19,147 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: null
• Product Description: null
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 0.60
• Pop Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 14:31:19,148 - controllers.conversation_controller - INFO - conversation_controller.py:85 - Sending final confirmation message
2024-10-21 14:34:08,073 - controllers.conversation_controller - INFO - conversation_controller.py:20 - Received conversation request for conversation ID: conv-12345
2024-10-21 14:34:08,074 - controllers.conversation_controller - DEBUG - conversation_controller.py:62 - Formatted messages: [
  {
    "role": "user",
    "content": "I want to create product priced at 20 rupees "
  }
]
2024-10-21 14:34:08,074 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 14:34:08,074 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 14:34:08,074 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 14:34:08,819 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
  "classification": "product_related"
}
2024-10-21 14:34:08,820 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
  "classification": "product_related"
}
2024-10-21 14:34:08,820 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 14:34:08,821 - controllers.conversation_controller - INFO - conversation_controller.py:65 - Conversation is product-related
2024-10-21 14:34:08,822 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 14:34:08,822 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 14:34:08,822 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:34:09,847 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:34:09,848 - controllers.conversation_controller - DEBUG - conversation_controller.py:67 - Extracted plan: {'product_name': None, 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 14:34:09,848 - controllers.conversation_controller - DEBUG - conversation_controller.py:99 - Final extracted plan: {
  "product_name": null,
  "product_description": null,
  "product_family": "GSM",
  "product_group": "Prepaid",
  "product_offer_price": "20",
  "pop_type": "Normal",
  "price_category": "Base Price",
  "price_mode": "Non-Recurring",
  "product_specification_type": "ADDON"
}
2024-10-21 15:26:23,101 - controllers.conversation_controller - INFO - conversation_controller.py:20 - Received conversation request for conversation ID: conv-12345
2024-10-21 15:26:27,851 - controllers.conversation_controller - INFO - conversation_controller.py:42 - Processing image message
2024-10-21 15:26:27,852 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 15:26:27,852 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 15:26:33,998 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here's the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": "4 Weeks",
  "price": "20 OMR"
}
```
2024-10-21 15:26:33,998 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here's the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": "4 Weeks",
  "price": "20 OMR"
}
```
2024-10-21 15:26:33,999 - controllers.conversation_controller - DEBUG - conversation_controller.py:47 - Extracted content from image: Here's the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "duration": "4 Weeks",
  "price": "20 OMR"
}
```
2024-10-21 15:26:33,999 - controllers.conversation_controller - DEBUG - conversation_controller.py:62 - Formatted messages: [
  {
    "role": "user",
    "content": "Here's the extracted content in JSON format:\n\n```json\n{\n  \"plan_name\": \"Hayyak 20\",\n  \"validity\": \"4 Weeks\",\n  \"units\": {\n    \"data_allowance\": \"34 GB\",\n    \"flexi_minutes\": \"650 min\"\n  },\n  \"duration\": \"4 Weeks\",\n  \"price\": \"20 OMR\"\n}\n```"
  }
]
2024-10-21 15:26:34,000 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 15:26:34,000 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 15:26:34,000 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 15:26:34,712 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 15:26:34,712 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 15:26:34,713 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 15:26:34,713 - controllers.conversation_controller - INFO - conversation_controller.py:65 - Conversation is product-related
2024-10-21 15:26:34,714 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 15:26:34,714 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 15:26:34,714 - services.conversation_service - DEBUG - conversation_service.py:42 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 15:26:35,737 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 15:26:35,737 - controllers.conversation_controller - DEBUG - conversation_controller.py:67 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 15:26:35,738 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 15:26:36,450 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

* Product Name: Hayyak 20
* Product Description: 
* Product Family: GSM
* Product Group: Prepaid
* Product Offer Price: 20
* Pop Type: Normal
* Price Category: Base Price
* Price Mode: Non-Recurring
* Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 15:26:36,450 - controllers.conversation_controller - INFO - conversation_controller.py:85 - Sending final confirmation message
2024-10-21 15:34:10,679 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-21 15:34:10,694 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-21 15:34:10,705 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-21 15:34:31,601 - controllers.conversation_controller - INFO - conversation_controller.py:20 - Received conversation request for conversation ID: conv-12345
2024-10-21 15:34:36,185 - controllers.conversation_controller - INFO - conversation_controller.py:42 - Processing image message
2024-10-21 15:34:36,186 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 15:34:36,186 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 15:34:40,185 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here's the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 15:34:40,186 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here's the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 15:34:40,186 - controllers.conversation_controller - DEBUG - conversation_controller.py:47 - Extracted content from image: Here's the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 15:34:40,187 - controllers.conversation_controller - DEBUG - conversation_controller.py:62 - Formatted messages: [
  {
    "role": "user",
    "content": "Here's the extracted content in JSON format:\n\n```json\n{\n  \"plan_name\": \"Hayyak 20\",\n  \"validity\": \"4 Weeks\",\n  \"units\": {\n    \"data_allowance\": \"34 GB\",\n    \"flexi_minutes\": \"650 min\"\n  },\n  \"price\": \"20 OMR\"\n}\n```"
  }
]
2024-10-21 15:34:40,187 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 15:34:40,188 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 15:34:40,188 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 15:34:40,903 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
  "classification": "product_related"
}
2024-10-21 15:34:40,903 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
  "classification": "product_related"
}
2024-10-21 15:34:40,904 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 15:34:40,904 - controllers.conversation_controller - INFO - conversation_controller.py:65 - Conversation is product-related
2024-10-21 15:34:40,905 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 15:34:40,905 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 15:34:40,906 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON', 'data_allowance': '', 'voice_allowance': ''}
2024-10-21 15:34:41,822 - services.conversation_service - DEBUG - conversation_service.py:46 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 15:34:41,822 - controllers.conversation_controller - DEBUG - conversation_controller.py:67 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON'}
2024-10-21 15:34:41,823 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 15:34:42,532 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: Hayyak 20
• Product Description: 
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 20
• Pop Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON

Would you like to update any of these details or proceed as is?
2024-10-21 15:34:42,532 - controllers.conversation_controller - INFO - conversation_controller.py:85 - Sending final confirmation message
2024-10-21 15:36:44,864 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-21 15:36:44,879 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-21 15:36:44,890 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-21 15:37:49,469 - controllers.conversation_controller - INFO - conversation_controller.py:20 - Received conversation request for conversation ID: conv-12345
2024-10-21 15:37:50,026 - controllers.conversation_controller - INFO - conversation_controller.py:42 - Processing image message
2024-10-21 15:37:50,026 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 15:37:59,018 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 15:38:03,146 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here is the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR",
  "duration": "5% VAT included"
}
```
2024-10-21 15:38:04,730 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here is the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR",
  "duration": "5% VAT included"
}
```
2024-10-21 15:38:22,343 - controllers.conversation_controller - DEBUG - conversation_controller.py:47 - Extracted content from image: Here is the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR",
  "duration": "5% VAT included"
}
```
2024-10-21 15:38:26,723 - controllers.conversation_controller - DEBUG - conversation_controller.py:62 - Formatted messages: [
  {
    "role": "user",
    "content": "Here is the extracted content in JSON format:\n\n```json\n{\n  \"plan_name\": \"Hayyak 20\",\n  \"validity\": \"4 Weeks\",\n  \"units\": {\n    \"data_allowance\": \"34 GB\",\n    \"flexi_minutes\": \"650 min\"\n  },\n  \"price\": \"20 OMR\",\n  \"duration\": \"5% VAT included\"\n}\n```"
  }
]
2024-10-21 15:38:28,076 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 15:38:28,077 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 15:38:28,077 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 15:38:28,842 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 15:38:28,843 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 15:38:28,843 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 15:38:30,003 - controllers.conversation_controller - INFO - conversation_controller.py:65 - Conversation is product-related
2024-10-21 15:38:48,240 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 15:38:48,760 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 15:38:52,219 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON', 'data_allowance': '', 'voice_allowance': ''}
2024-10-21 15:43:20,801 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-21 15:43:20,816 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-21 15:43:20,827 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-21 15:43:24,760 - controllers.conversation_controller - INFO - conversation_controller.py:20 - Received conversation request for conversation ID: conv-12345
2024-10-21 15:43:44,027 - controllers.conversation_controller - INFO - conversation_controller.py:42 - Processing image message
2024-10-21 15:43:44,027 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 15:43:44,028 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 15:43:49,154 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here’s the JSON representation based on the content extracted from the image:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 15:43:49,155 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here’s the JSON representation based on the content extracted from the image:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 15:43:49,155 - controllers.conversation_controller - DEBUG - conversation_controller.py:47 - Extracted content from image: Here’s the JSON representation based on the content extracted from the image:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 15:43:49,156 - controllers.conversation_controller - DEBUG - conversation_controller.py:62 - Formatted messages: [
  {
    "role": "user",
    "content": "Here\u2019s the JSON representation based on the content extracted from the image:\n\n```json\n{\n  \"plan_name\": \"Hayyak 20\",\n  \"validity\": \"4 Weeks\",\n  \"units\": {\n    \"data_allowance\": \"34 GB\",\n    \"flexi_minutes\": \"650 min\"\n  },\n  \"price\": \"20 OMR\"\n}\n```"
  }
]
2024-10-21 15:43:49,156 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 15:43:49,156 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 15:43:49,156 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 15:43:49,870 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {
"classification": "product_related"
}
2024-10-21 15:43:49,870 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {
"classification": "product_related"
}
2024-10-21 15:43:49,870 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 15:43:49,870 - controllers.conversation_controller - INFO - conversation_controller.py:65 - Conversation is product-related
2024-10-21 15:43:49,871 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 15:43:49,871 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 15:43:49,871 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON', 'data_allowance': '', 'voice_allowance': ''}
2024-10-21 15:45:08,640 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-21 15:45:08,655 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-21 15:45:08,666 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
2024-10-21 15:45:12,171 - controllers.conversation_controller - INFO - conversation_controller.py:20 - Received conversation request for conversation ID: conv-12345
2024-10-21 15:45:19,344 - controllers.conversation_controller - INFO - conversation_controller.py:42 - Processing image message
2024-10-21 15:45:19,346 - services.image_processor_service - INFO - image_processor_service.py:10 - Extracting content from image
2024-10-21 15:45:19,346 - services.ai_client_service - INFO - ai_client_service.py:75 - Making image API call to OpenAI
2024-10-21 15:45:23,349 - services.ai_client_service - DEBUG - ai_client_service.py:89 - OpenAI image API response: Here's the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 15:45:23,350 - services.image_processor_service - DEBUG - image_processor_service.py:12 - Extracted image content: Here's the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 15:45:23,351 - controllers.conversation_controller - DEBUG - conversation_controller.py:47 - Extracted content from image: Here's the extracted content in JSON format:

```json
{
  "plan_name": "Hayyak 20",
  "validity": "4 Weeks",
  "units": {
    "data_allowance": "34 GB",
    "flexi_minutes": "650 min"
  },
  "price": "20 OMR"
}
```
2024-10-21 15:45:23,351 - controllers.conversation_controller - DEBUG - conversation_controller.py:62 - Formatted messages: [
  {
    "role": "user",
    "content": "Here's the extracted content in JSON format:\n\n```json\n{\n  \"plan_name\": \"Hayyak 20\",\n  \"validity\": \"4 Weeks\",\n  \"units\": {\n    \"data_allowance\": \"34 GB\",\n    \"flexi_minutes\": \"650 min\"\n  },\n  \"price\": \"20 OMR\"\n}\n```"
  }
]
2024-10-21 15:45:23,351 - utils.helpers - INFO - helpers.py:13 - Checking if message is product-related
2024-10-21 15:45:23,352 - utils.helpers - DEBUG - helpers.py:18 - Sending classification prompt to AI: 
You are an AI assistant tasked with determining whether a given conversation message is related to ...
2024-10-21 15:45:23,352 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 15:45:24,062 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: {"classification": "product_related"}
2024-10-21 15:45:24,063 - utils.helpers - DEBUG - helpers.py:20 - Received classification response: {"classification": "product_related"}
2024-10-21 15:45:24,063 - utils.helpers - INFO - helpers.py:24 - Message classified as: product_related
2024-10-21 15:45:24,064 - controllers.conversation_controller - INFO - conversation_controller.py:65 - Conversation is product-related
2024-10-21 15:45:24,064 - services.conversation_service - INFO - conversation_service.py:28 - Handling conversation for conversation ID: conv-12345
2024-10-21 15:45:24,065 - services.conversation_service - DEBUG - conversation_service.py:11 - Formatting 1 messages
2024-10-21 15:45:24,065 - services.conversation_service - DEBUG - conversation_service.py:44 - Extracting plan with schema: {'product_name': '', 'product_description': '', 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON', 'data_allowance': '', 'voice_allowance': ''}
2024-10-21 15:45:25,093 - services.conversation_service - DEBUG - conversation_service.py:46 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON', 'data_allowance': '34 GB', 'voice_allowance': '650 min'}
2024-10-21 15:45:25,093 - controllers.conversation_controller - DEBUG - conversation_controller.py:67 - Extracted plan: {'product_name': 'Hayyak 20', 'product_description': None, 'product_family': 'GSM', 'product_group': 'Prepaid', 'product_offer_price': '20', 'pop_type': 'Normal', 'price_category': 'Base Price', 'price_mode': 'Non-Recurring', 'product_specification_type': 'ADDON', 'data_allowance': '34 GB', 'voice_allowance': '650 min'}
2024-10-21 15:45:25,093 - services.ai_client_service - INFO - ai_client_service.py:36 - Making API call to groq
2024-10-21 15:45:25,900 - services.ai_client_service - DEBUG - ai_client_service.py:47 - Groq API response: Here are the details of your product with all mandatory default parameters enabled:

• Product Name: Hayyak 20
• Product Description: None
• Product Family: GSM
• Product Group: Prepaid
• Product Offer Price: 20
• Pop Type: Normal
• Price Category: Base Price
• Price Mode: Non-Recurring
• Product Specification Type: ADDON
• Data Allowance: 34 GB
• Voice Allowance: 650 min

Would you like to update any of these details or proceed as is?
2024-10-21 15:45:25,901 - controllers.conversation_controller - INFO - conversation_controller.py:85 - Sending final confirmation message
2024-10-21 19:34:30,403 - services.ai_client_service - INFO - ai_client_service.py:16 - Initializing AI clients
2024-10-21 19:34:30,416 - services.ai_client_service - INFO - ai_client_service.py:19 - Initialized Groq client
2024-10-21 19:34:30,427 - services.ai_client_service - INFO - ai_client_service.py:32 - Initialized OpenAI image client
